import { IWizardPage } from './IWizardPage';
import { WizardPage } from './WizardPage';
import { WizardPageDefinition, WizardPageFieldDefinition, WizardPageSectionDefinition } from './WebviewWizard';
import { Template } from './pageImpl';
export declare class WebviewWizardPage extends WizardPage implements IWizardPage {
    definition: WizardPageDefinition;
    constructor(definition: WizardPageDefinition);
    getValidationTemplates(parameters: any): Template[];
    validate(parameters: any, templates: Template[]): Template[];
    getContentAsHTML(data: any): string;
    oneSectionAsString(oneSection: WizardPageSectionDefinition, data: any): string;
    oneFieldAsString(oneField: WizardPageFieldDefinition, data: any): string;
    textBoxAsHTML(oneField: WizardPageFieldDefinition, data: any): string;
    numberAsHTML(oneField: WizardPageFieldDefinition, data: any): string;
    checkBoxAsHTML(oneField: WizardPageFieldDefinition, data: any): string;
    textAreaAsHTML(oneField: WizardPageFieldDefinition, data: any): string;
    radioGroupAsHTML(oneField: WizardPageFieldDefinition, data: any): string;
    selectAsHTML(oneField: WizardPageFieldDefinition, data: any): string;
    comboAsHTML(oneField: WizardPageFieldDefinition, data: any): string;
    onInputFieldChanged(id: string): string;
    onInputFieldChangedWithValue(id: string, val: string): string;
    validationDiv(id: string, tabs: number): string;
    labelFor(fieldId: string, labelVal: string, tabs: number): string;
    divClass(classname: string, tabs: number, inner: string): string;
    numTabs(num: number): string;
    getInitialValue(oneField: WizardPageFieldDefinition, data: any): string;
}
//# sourceMappingURL=WebviewWizardPage.d.ts.map