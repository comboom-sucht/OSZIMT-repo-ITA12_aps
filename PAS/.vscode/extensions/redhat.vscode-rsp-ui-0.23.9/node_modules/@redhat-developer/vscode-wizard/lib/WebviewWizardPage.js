"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebviewWizardPage = void 0;
const WizardPage_1 = require("./WizardPage");
const WebviewWizard_1 = require("./WebviewWizard");
class WebviewWizardPage extends WizardPage_1.WizardPage {
    constructor(definition) {
        super(definition.id, definition.title, definition.description);
        this.definition = definition;
    }
    getValidationTemplates(parameters) {
        let templates = [];
        for (let key of this.definition.fields) {
            if (WebviewWizard_1.isWizardPageSectionDefinition(key)) {
                for (let key2 of key.childFields) {
                    templates.push({ id: key2.id + "Validation", content: "&nbsp;" });
                }
            }
            else if (WebviewWizard_1.isWizardPageFieldDefinition(key)) {
                templates.push({ id: key.id + "Validation", content: "&nbsp;" });
            }
        }
        this.setPageComplete(true);
        return this.validate(parameters, templates);
    }
    validate(parameters, templates) {
        if (this.definition.validator) {
            let resp = this.definition.validator.call(null, parameters);
            if (resp && resp.errors && resp.errors.length > 0) {
                this.setPageComplete(false);
                for (let oneTemplate of resp.errors) {
                    oneTemplate.content = "<i class=\"icon icon__error\"></i>" + (oneTemplate.content ? oneTemplate.content : "");
                }
                templates = templates.concat(resp.errors);
            }
            if (resp && resp.warnings && resp.warnings.length > 0) {
                for (let oneTemplate of resp.warnings) {
                    oneTemplate.content = "<i class=\"icon icon__warn\"></i>" + (oneTemplate.content ? oneTemplate.content : "");
                }
                templates = templates.concat(resp.warnings);
            }
            if (resp && resp.infos && resp.infos.length > 0) {
                for (let oneTemplate of resp.infos) {
                    oneTemplate.content = "<i class=\"icon icon__info\"></i>" + (oneTemplate.content ? oneTemplate.content : "");
                }
                templates = templates.concat(resp.infos);
            }
            if (resp && resp.other && resp.other.length > 0) {
                templates = templates.concat(resp.other);
            }
        }
        return templates;
    }
    getContentAsHTML(data) {
        let ret = "";
        for (let oneField of this.definition.fields) {
            if (WebviewWizard_1.isWizardPageSectionDefinition(oneField)) {
                ret += this.oneSectionAsString(oneField, data);
            }
            else if (WebviewWizard_1.isWizardPageFieldDefinition(oneField)) {
                ret += this.oneFieldAsString(oneField, data);
            }
        }
        return ret;
        ``;
    }
    oneSectionAsString(oneSection, data) {
        let ret = "";
        let onclick = " onclick=\"document.getElementById('" + oneSection.id + "').classList.toggle('collapsed');\"";
        ret += "<section id=\"" + oneSection.id + "\" class=\"section--settings section--collapsible\"" + ">\n";
        ret += "        <div class=\"section__header\" " + onclick + ">\n";
        ret += "                <h2>" + oneSection.label + "</h2>\n";
        if (oneSection.description) {
            ret += "                <p class=\"section__header-hint\">" + oneSection.description + "</p>\n";
        }
        ret += "        </div>\n";
        ret += "        <div class=\"section__collapsible\">\n";
        ret += "           <div class=\"section__group\">\n";
        ret += "                <div class=\"section__content\">\n";
        for (let oneField of oneSection.childFields) {
            ret += this.oneFieldAsString(oneField, data);
        }
        ret += "                </div>\n";
        ret += "           </div>\n";
        ret += "        </div>\n";
        ret += "</section>\n";
        return ret;
    }
    oneFieldAsString(oneField, data) {
        let ret = "";
        if (oneField.type === "textbox") {
            ret = ret + this.textBoxAsHTML(oneField, data);
        }
        else if (oneField.type === "checkbox") {
            ret = ret + this.checkBoxAsHTML(oneField, data);
        }
        else if (oneField.type === "number") {
            ret = ret + this.numberAsHTML(oneField, data);
        }
        else if (oneField.type === "textarea") {
            ret = ret + this.textAreaAsHTML(oneField, data);
        }
        else if (oneField.type === "radio") {
            ret = ret + this.radioGroupAsHTML(oneField, data);
        }
        else if (oneField.type === "select") {
            ret = ret + this.selectAsHTML(oneField, data);
        }
        else if (oneField.type === "combo") {
            ret = ret + this.comboAsHTML(oneField, data);
        }
        return this.divClass("setting", 0, ret);
    }
    textBoxAsHTML(oneField, data) {
        let iv = this.getInitialValue(oneField, data);
        let lbl = this.labelFor(oneField.id, oneField.label, 0);
        let initialValueSegment = oneField.initialValue ? " value=\"" + oneField.initialValue + "\"" : "";
        let placeholderSegment = !oneField.initialValue && oneField.placeholder ? " placeholder=\"" + oneField.placeholder + "\"" : "";
        let disabled = (oneField.properties && oneField.properties.disabled ? " disabled" : "");
        let input = "<input id=\"" + oneField.id + "\" name=\"" + oneField.id + "\" type=\"text\""
            + (iv ? "value=\"" + iv + "\"" : "")
            + initialValueSegment + placeholderSegment + this.onInputFieldChanged(oneField.id) +
            disabled + " data-setting data-setting-preview>";
        let validationDiv = this.validationDiv(oneField.id, 0);
        let inner = lbl + input + validationDiv;
        let settingInput = this.divClass("setting__input", 0, inner);
        let hint = "<p class=\"setting__hint\">" +
            (oneField.description ? oneField.description : "")
            + "</p>";
        return settingInput + hint;
    }
    numberAsHTML(oneField, data) {
        let iv = this.getInitialValue(oneField, data);
        let lbl = this.labelFor(oneField.id, oneField.label, 0);
        let initialValueSegment = oneField.initialValue ? " value=\"" + oneField.initialValue + "\"" : "";
        let placeholderSegment = !oneField.initialValue && oneField.placeholder ? " placeholder=\"" + oneField.placeholder + "\"" : "";
        let disabled = (oneField.properties && oneField.properties.disabled ? " disabled" : "");
        let input = "<input id=\"" + oneField.id + "\" name=\"" + oneField.id + "\" type=\"number\""
            + (iv ? "value=\"" + iv + "\"" : "")
            + initialValueSegment + placeholderSegment + this.onInputFieldChanged(oneField.id) +
            disabled + " data-setting data-setting-preview>";
        let validationDiv = this.validationDiv(oneField.id, 0);
        let inner = lbl + input + validationDiv;
        let settingInput = this.divClass("setting__input", 0, inner);
        let hint = "<p class=\"setting__hint\">" +
            (oneField.description ? oneField.description : "")
            + "</p>";
        return settingInput + hint;
    }
    checkBoxAsHTML(oneField, data) {
        let iv = this.getInitialValue(oneField, data);
        let lbl = this.labelFor(oneField.id, oneField.label, 0);
        let validationDiv = this.validationDiv(oneField.id, 0);
        // create the input item
        let fieldChangedArg2 = " document.getElementById('" + oneField.id + "').checked";
        let oninput = this.onInputFieldChangedWithValue(oneField.id, fieldChangedArg2);
        let disabled = (oneField.properties && oneField.properties.disabled ? " disabled" : "");
        let checked = (iv ? " checked" : "");
        let input = "<input id=\"" + oneField.id + "\" name=\"" + oneField.id + "\" type=\"checkbox\""
            + oninput + " data-setting data-setting-preview" + checked + disabled + ">";
        let inner = input + lbl + validationDiv;
        let settingInput = this.divClass("setting__input", 0, inner);
        let hint = "<p class=\"setting__hint\">" + (oneField.description ? oneField.description : "") + "</p>";
        return settingInput + hint;
    }
    textAreaAsHTML(oneField, data) {
        let cols = (oneField.properties && oneField.properties.columns ? " cols=\"" + oneField.properties.columns + "\"" : "");
        let rows = (oneField.properties && oneField.properties.rows ? " rows=\"" + oneField.properties.rows + "\"" : "");
        let iv = this.getInitialValue(oneField, data);
        let lbl = this.labelFor(oneField.id, oneField.label, 0);
        let disabled = (oneField.properties && oneField.properties.disabled ? " disabled" : "");
        let placeholder = (!oneField.initialValue && oneField.placeholder ?
            " placeholder=\"" + oneField.placeholder + "\"" : "");
        let oninput = this.onInputFieldChanged(oneField.id);
        let textarea = "<textarea id=\"" + oneField.id + "\" name=\"" + oneField.id + "\" "
            + cols + rows + oninput + placeholder + disabled + " data-setting data-setting-preview>";
        if (iv) {
            textarea += iv;
        }
        textarea = textarea + "</textarea>\n";
        let validationDiv = this.validationDiv(oneField.id, 0);
        let inner = lbl + textarea + validationDiv;
        let settingInput = this.divClass("setting__input", 0, inner);
        let hint = "<p class=\"setting__hint\">" + (oneField.description ? oneField.description : "") + "</p>";
        return settingInput + hint;
    }
    radioGroupAsHTML(oneField, data) {
        var _a, _b;
        let iv = this.getInitialValue(oneField, data);
        let label = this.labelFor(oneField.id, oneField.label, 0);
        let disabled = (oneField.properties && oneField.properties.disabled ? " disabled" : "");
        let inputs = "";
        if (oneField.properties && ((_a = oneField.properties) === null || _a === void 0 ? void 0 : _a.options)) {
            for (let oneOpt of (_b = oneField.properties) === null || _b === void 0 ? void 0 : _b.options) {
                let selected = iv ? (iv === oneOpt) : false;
                let oninput = this.onInputFieldChangedWithValue(oneField.id, "'" + oneOpt + "'");
                inputs = inputs + "<input type=\"radio\" name=\"" + oneField.id +
                    "\" id=\"" + oneOpt +
                    oninput +
                    (selected ? " checked" : "") +
                    disabled +
                    ">\n";
                inputs += this.labelFor(oneOpt, oneOpt, 0);
            }
        }
        let inputContainer = this.divClass("select-container", 0, inputs);
        let validationDiv = this.validationDiv(oneField.id, 0);
        let settingInput = this.divClass("setting__input", 0, label + inputContainer + validationDiv);
        let hint = "<p class=\"setting__hint\">" + (oneField.description ? oneField.description : "") + "</p>";
        return settingInput + hint;
    }
    selectAsHTML(oneField, data) {
        var _a, _b;
        let iv = this.getInitialValue(oneField, data);
        let label = this.labelFor(oneField.id, oneField.label, 0);
        let oninput = this.onInputFieldChanged(oneField.id);
        let disabled = (oneField.properties && oneField.properties.disabled ? " disabled" : "");
        // Create the select
        let select = "<select name=\"" + oneField.id + "\" id=\"" + oneField.id + "\""
            + oninput + disabled + " data-setting>\n";
        if (oneField.properties && ((_a = oneField.properties) === null || _a === void 0 ? void 0 : _a.options)) {
            for (let oneOpt of (_b = oneField.properties) === null || _b === void 0 ? void 0 : _b.options) {
                let selected = iv ? (iv === oneOpt) : false;
                select = select + "   <option" + (selected ? " selected" : "") + ">" + oneOpt + "</option>\n";
            }
        }
        select += "</select>\n";
        let selectContainer = this.divClass("select-container", 0, select);
        let validationDiv = this.validationDiv(oneField.id, 0);
        let settingInput = this.divClass("setting__input", 0, label + selectContainer + validationDiv);
        let hint = "<p class=\"setting__hint\">" + (oneField.description ? oneField.description : "") + "</p>";
        return settingInput + hint;
    }
    comboAsHTML(oneField, data) {
        var _a;
        if (!oneField.optionProvider && (!oneField.properties || !oneField.properties.options)) {
            return this.textBoxAsHTML(oneField, data);
        }
        let iv = this.getInitialValue(oneField, data);
        let label = this.labelFor(oneField.id, oneField.label, 0);
        let oninput = this.onInputFieldChanged(oneField.id);
        let disabled = (oneField.properties && oneField.properties.disabled ? " disabled" : "");
        // actual combo here
        let text = "<input type=\"text\" name=\"" + oneField.id + "\" " +
            "list=\"" + oneField.id + "InternalList\" " +
            "id=\"" + oneField.id + "\"" +
            (iv ? "value=\"" + iv + "\"" : "") +
            disabled +
            oninput + "/>\n";
        let dataList = "<datalist id=\"" + oneField.id + "InternalList\">";
        let optList = null;
        if (oneField.optionProvider) {
            optList = oneField.optionProvider(data);
        }
        if (optList === null && oneField.properties && oneField.properties.options) {
            optList = (_a = oneField.properties) === null || _a === void 0 ? void 0 : _a.options;
        }
        for (let oneOpt of optList) {
            let selected = iv ? (iv === oneOpt) : false;
            dataList = dataList + "   <option value=\"" + oneOpt + "\"" + (selected ? " selected" : "") + ">\n";
        }
        dataList = dataList + "</datalist>\n";
        let validationDiv = this.validationDiv(oneField.id, 0);
        let settingInput = this.divClass("setting__input", 0, label + text + dataList + validationDiv);
        let hint = "<p class=\"setting__hint\">" + (oneField.description ? oneField.description : "") + "</p>";
        return settingInput + hint;
    }
    onInputFieldChanged(id) {
        return " oninput=\"fieldChanged('" + id + "')\" ";
    }
    onInputFieldChangedWithValue(id, val) {
        return " oninput=\"fieldChangedWithVal('" + id + "', " + val + ")\"";
    }
    validationDiv(id, tabs) {
        let tabss = this.numTabs(tabs);
        return tabss + "<div id=\"" + id + "Validation\">&nbsp;</div>\n";
    }
    labelFor(fieldId, labelVal, tabs) {
        let tabss = this.numTabs(tabs);
        return tabss + "<label for=\"" + fieldId + "\">" + labelVal + "</label>\n";
    }
    divClass(classname, tabs, inner) {
        let tabss = this.numTabs(tabs);
        return tabss + "<div class=\"" + classname + "\">\n" + inner + tabss + "</div>\n";
    }
    numTabs(num) {
        let ret = "";
        for (let i = 0; i < num; i++) {
            ret += "\t";
        }
        return ret;
    }
    getInitialValue(oneField, data) {
        if (data instanceof Map) {
            return data && data.get(oneField.id) ? data.get(oneField.id) : oneField.initialValue;
        }
        return data && data[oneField.id] ? data[oneField.id] : oneField.initialValue;
    }
}
exports.WebviewWizardPage = WebviewWizardPage;
//# sourceMappingURL=WebviewWizardPage.js.map