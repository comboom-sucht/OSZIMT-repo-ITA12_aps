"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isWizardPageFieldDefinition = exports.isWizardPageSectionDefinition = exports.WebviewWizard = void 0;
const Wizard_1 = require("./Wizard");
const pageImpl_1 = require("./pageImpl");
const WebviewWizardPage_1 = require("./WebviewWizardPage");
class WebviewWizard extends Wizard_1.Wizard {
    constructor(id, type, context2, definition, initialData) {
        super();
        this.currentPage = null;
        this.initialData = initialData;
        this.definition = definition;
        this.id = id;
        this.imageString = definition.bannerIconString;
        this.type = type;
        this.title = definition.title;
        this.description = definition.description;
        this.context = context2;
        this.readyMapping = {
            command: "ready",
            handler: (parameters) => __awaiter(this, void 0, void 0, function* () {
                return {
                    returnObject: {},
                    templates: this.getShowCurrentPageTemplates(initialData)
                };
            })
        };
        this.nextPressedMapping = {
            command: "nextPressed",
            handler: (parameters) => __awaiter(this, void 0, void 0, function* () {
                return this.nextImpl(parameters);
            })
        };
        this.backPressedMapping = {
            command: "backPressed",
            handler: (parameters) => __awaiter(this, void 0, void 0, function* () {
                return this.backImpl(parameters);
            })
        };
        this.finishPressedMapping = {
            command: "finishPressed",
            handler: (parameters) => __awaiter(this, void 0, void 0, function* () {
                console.log(parameters);
                return this.finishImpl(parameters);
            })
        };
        this.validateMapping = {
            command: "validate",
            handler: (parameters) => __awaiter(this, void 0, void 0, function* () {
                const validations = this.generateValidationTemplates(parameters);
                validations.push({ id: "wizardControls", content: this.getUpdatedWizardControls(parameters, false) });
                return {
                    returnObject: {},
                    templates: validations
                };
            })
        };
    }
    canFinishInternal(parameters) {
        var ret;
        if (this.definition.workflowManager === undefined) {
            ret = super.canFinish();
        }
        else {
            ret = this.definition.workflowManager.canFinish(this, parameters !== undefined ? parameters : {});
        }
        return ret;
    }
    getActualPreviousPage(data) {
        let previousPage = null;
        if (this.currentPage === null) {
            previousPage = this.getStartingPage();
        }
        else if (this.definition.workflowManager !== undefined
            && this.definition.workflowManager.getPreviousPage) {
            previousPage = this.definition.workflowManager.getPreviousPage(this.currentPage, data === undefined ? {} : data);
        }
        else {
            previousPage = this.getPreviousPage(this.currentPage);
        }
        return previousPage;
    }
    getActualNextPage(data) {
        let nextPage = null;
        if (this.currentPage === null) {
            nextPage = this.getStartingPage();
        }
        else if (this.definition.workflowManager !== undefined
            && this.definition.workflowManager.getNextPage) {
            nextPage = this.definition.workflowManager.getNextPage(this.currentPage, data === undefined ? {} : data);
        }
        else {
            nextPage = this.getNextPage(this.currentPage);
        }
        return nextPage;
    }
    backImpl(data) {
        this.currentPage = this.getActualPreviousPage(data);
        return {
            returnObject: {},
            templates: this.getShowCurrentPageTemplates(data)
        };
    }
    nextImpl(data) {
        let nextPage = this.getActualNextPage(data);
        this.currentPage = nextPage;
        return {
            returnObject: {},
            templates: this.getShowCurrentPageTemplates(data)
        };
    }
    finishImpl(data) {
        return __awaiter(this, void 0, void 0, function* () {
            let resp = null;
            if (this.definition.workflowManager !== undefined) {
                resp = yield this.definition.workflowManager.performFinish(this, data);
            }
            if (resp == null) {
                this.close();
                return {
                    returnObject: {},
                    templates: []
                };
            }
            else {
                if (resp.close) {
                    this.close();
                }
                return {
                    returnObject: resp.returnObject,
                    templates: resp.templates
                };
            }
        });
    }
    close() {
        pageImpl_1.disposeWizard(this.id);
    }
    getShowCurrentPageTemplates(parameters) {
        let ret = [];
        ret.push({ id: "wizardTitle", content: this.title });
        ret.push({ id: "wizardDescription", content: this.description });
        ret.push({ id: "pageTitle", content: this.getCurrentPageName() });
        ret.push({ id: "pageDescription", content: this.getCurrentPageDescription() });
        ret.push({ id: "content", content: this.getCurrentPageContent(parameters) });
        ret.push({ id: "wizardControls", content: this.getUpdatedWizardControls(parameters, true) });
        if (this.imageString !== undefined) {
            ret.push({ id: "wizardBanner", content: this.imageString });
        }
        return ret;
    }
    generateValidationTemplates(parameters) {
        return this.getCurrentPage() !== null ? this.getCurrentPage().getValidationTemplates(parameters) : [];
    }
    getCurrentPageName() {
        return (this.currentPage === null ? "" : this.currentPage.getName());
    }
    getCurrentPageId() {
        return (this.currentPage === null ? "" : this.currentPage.getId());
    }
    getCurrentPageDescription() {
        return (this.currentPage === null ? "" : this.currentPage.getDescription());
    }
    getCurrentPageContent(parameters) {
        const page = this.getCurrentPage();
        if (page === null) {
            return "";
        }
        return page.getContentAsHTML(parameters);
    }
    getCurrentPage() {
        const cur = super.getPage(this.getCurrentPageId());
        if (cur instanceof WebviewWizardPage_1.WebviewWizardPage) {
            return cur;
        }
        return null;
    }
    open() {
        super.open();
        this.currentPage = this.getStartingPage();
        pageImpl_1.createOrShowWizard(this.id, this.type, this.title, this.context, [this.readyMapping, this.validateMapping, this.backPressedMapping,
            this.nextPressedMapping, this.finishPressedMapping]);
        // organize initial data
        let m = new Map();
        for (let p of this.definition.pages) {
            p.fields.forEach(element => {
                if (isWizardPageSectionDefinition(element)) {
                    for (let p2 of element.childFields) {
                        if (p2.initialValue) {
                            m.set(p2.id, p2.initialValue);
                        }
                    }
                }
                else if (isWizardPageFieldDefinition(element)) {
                    if (element.initialValue) {
                        m.set(element.id, element.initialValue);
                    }
                }
            });
        }
        pageImpl_1.sendInitialData(this.id, new Map([...m, ...this.initialData]));
    }
    addPages() {
        for (let d of this.definition.pages) {
            let page = new WebviewWizardPage_1.WebviewWizardPage(d);
            page.setWizard(this);
            page.validate({}, []);
            this.addPage(page);
        }
    }
    getUpdatedWizardControls(parameters, validate) {
        if (validate) {
            this.generateValidationTemplates(parameters);
        }
        let hasPrevious = (this.currentPage !== null &&
            this.getActualPreviousPage(this.currentPage) !== null);
        let hasNext = (this.currentPage !== null && this.currentPage.isPageComplete() &&
            this.getActualNextPage(parameters) !== null);
        let canFinishNow = this.canFinishInternal(parameters);
        const ret = this.createButton("buttonBack", "backPressed()", hasPrevious, "Back") +
            this.createButton("buttonNext", "nextPressed()", hasNext, "Next") +
            this.createButton("buttonFinish", "finishPressed()", canFinishNow, "Finish");
        return ret;
    }
    createButton(id, onclick, enabled, text) {
        return "<button type=\"button\" class=\"btn btn-secondary button--big\" id=\"" + id +
            "\" onclick=\"" + onclick + "\" " + (enabled ? "" : " disabled") + ">" + text + "</button>\n";
    }
}
exports.WebviewWizard = WebviewWizard;
function isWizardPageSectionDefinition(def) {
    return def.childFields !== undefined;
}
exports.isWizardPageSectionDefinition = isWizardPageSectionDefinition;
function isWizardPageFieldDefinition(def) {
    return def.type !== undefined;
}
exports.isWizardPageFieldDefinition = isWizardPageFieldDefinition;
//# sourceMappingURL=WebviewWizard.js.map