import { Wizard } from './Wizard';
import { IWizard } from './IWizard';
import { IWizardPage } from './IWizardPage';
import * as vscode from 'vscode';
import { MesssageMapping, Template, HandlerResponse } from "./pageImpl";
import { WebviewWizardPage } from './WebviewWizardPage';
import { IWizardWorkflowManager } from './IWizardWorkflowManager';
export declare class WebviewWizard extends Wizard implements IWizard {
    context: vscode.ExtensionContext;
    readyMapping: MesssageMapping;
    backPressedMapping: MesssageMapping;
    nextPressedMapping: MesssageMapping;
    finishPressedMapping: MesssageMapping;
    validateMapping: MesssageMapping;
    currentPage: IWizardPage | null;
    id: string;
    type: string;
    title: string;
    imageString: string | undefined;
    description: string;
    definition: WizardDefinition;
    initialData: Map<string, string>;
    constructor(id: string, type: string, context2: vscode.ExtensionContext, definition: WizardDefinition, initialData: Map<string, string>);
    canFinishInternal(parameters: any): boolean;
    getActualPreviousPage(data: any): IWizardPage | null;
    getActualNextPage(data: any): IWizardPage | null;
    backImpl(data: any): HandlerResponse;
    nextImpl(data: any): HandlerResponse;
    finishImpl(data: any): Promise<HandlerResponse>;
    close(): void;
    getShowCurrentPageTemplates(parameters: any): Template[];
    generateValidationTemplates(parameters: any): Template[];
    getCurrentPageName(): string;
    getCurrentPageId(): string;
    getCurrentPageDescription(): string;
    getCurrentPageContent(parameters: any): string;
    getCurrentPage(): WebviewWizardPage | null;
    open(): void;
    addPages(): void;
    getUpdatedWizardControls(parameters: any, validate: boolean): string;
    createButton(id: string, onclick: string, enabled: boolean, text: string): string;
}
export declare type WizardPageValidator = (parameters?: any) => ValidatorResponse;
export declare type WizardPageFieldOptionProvider = (parameters?: any) => string[];
export interface ValidatorResponse {
    errors?: Template[];
    warnings?: Template[];
    infos?: Template[];
    other?: Template[];
}
export interface WizardDefinition {
    title: string;
    description: string;
    bannerIconString?: string;
    pages: WizardPageDefinition[];
    workflowManager?: IWizardWorkflowManager;
}
export interface WizardPageDefinition {
    id: string;
    title: string;
    description: string;
    fields: (WizardPageFieldDefinition | WizardPageSectionDefinition)[];
    validator?: WizardPageValidator;
}
export interface WizardPageSectionDefinition {
    id: string;
    label: string;
    description?: string;
    childFields: WizardPageFieldDefinition[];
}
export declare function isWizardPageSectionDefinition(def: WizardPageFieldDefinition | WizardPageSectionDefinition): def is WizardPageSectionDefinition;
export declare function isWizardPageFieldDefinition(def: WizardPageFieldDefinition | WizardPageSectionDefinition): def is WizardPageFieldDefinition;
export interface WizardPageFieldDefinition {
    id: string;
    type: string;
    label: string;
    description?: string;
    initialValue?: string;
    placeholder?: string;
    properties?: any;
    optionProvider?: WizardPageFieldOptionProvider;
}
//# sourceMappingURL=WebviewWizard.d.ts.map