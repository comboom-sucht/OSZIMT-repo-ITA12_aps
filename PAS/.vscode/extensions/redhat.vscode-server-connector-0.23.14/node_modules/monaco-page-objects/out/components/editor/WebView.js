"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebView = void 0;
const Editor_1 = require("./Editor");
const selenium_webdriver_1 = require("selenium-webdriver");
/**
 * Page object representing an open editor containing a web view
 */
class WebView extends Editor_1.Editor {
    /**
     * Search for an element inside the webview iframe.
     * Requires webdriver being switched to the webview iframe first.
     * (Will attempt to search from the main DOM root otherwise)
     *
     * @param locator webdriver locator to search by
     * @returns promise resolving to WebElement when found
     */
    findWebElement(locator) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getDriver().findElement(locator);
        });
    }
    /**
     * Search for all element inside the webview iframe by a given locator
     * Requires webdriver being switched to the webview iframe first.
     * (Will attempt to search from the main DOM root otherwise)
     *
     * @param locator webdriver locator to search by
     * @returns promise resolving to a list of WebElement objects
     */
    findWebElements(locator) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getDriver().findElements(locator);
        });
    }
    /**
     * Switch the underlying webdriver context to the webview iframe.
     * This allows using the findWebElement methods.
     * Note that only elements inside the webview iframe will be accessible.
     * Use the switchBack method to switch to the original context.
     */
    switchToFrame() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!WebView.handle) {
                WebView.handle = yield this.getDriver().getWindowHandle();
            }
            if (WebView.versionInfo.browser === 'vscode' && WebView.versionInfo.version >= '1.56.0') {
                yield this.getDriver().wait(selenium_webdriver_1.until.elementLocated(WebView.locators.WebView.iframe), 5000);
                const view = yield this.getDriver().findElement(WebView.locators.WebView.iframe);
                yield this.getDriver().switchTo().frame(view);
                const frame = yield this.getDriver().findElement(WebView.locators.WebView.activeFrame);
                yield this.getDriver().wait(selenium_webdriver_1.until.elementLocated(WebView.locators.WebView.activeFrame), 5000);
                yield this.getDriver().switchTo().frame(frame);
            }
            else {
                const handles = yield this.getDriver().getAllWindowHandles();
                for (const handle of handles) {
                    yield this.getDriver().switchTo().window(handle);
                    if ((yield this.getDriver().getTitle()).includes('Virtual Document')) {
                        yield this.getDriver().switchTo().frame(0);
                        return;
                    }
                }
            }
        });
    }
    /**
     * Switch the underlying webdriver back to the original window
     */
    switchBack() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!WebView.handle) {
                WebView.handle = yield this.getDriver().getWindowHandle();
            }
            return this.getDriver().switchTo().window(WebView.handle);
        });
    }
}
exports.WebView = WebView;
//# sourceMappingURL=WebView.js.map