"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugToolbar = void 0;
const selenium_webdriver_1 = require("selenium-webdriver");
const AbstractElement_1 = require("../AbstractElement");
const Workbench_1 = require("./Workbench");
/**
 * Page object for the Debugger Toolbar
 */
class DebugToolbar extends AbstractElement_1.AbstractElement {
    constructor() {
        super(DebugToolbar.locators.DebugToolbar.ctor, new Workbench_1.Workbench());
    }
    /**
     * Wait for the debug toolbar to appear and instantiate it.
     * Assumes that debug session is already starting and it is just
     * a matter of waiting for the toolbar to appear.
     *
     * @param timeout max time to wait in milliseconds, default 5000
     */
    static create(timeout = 5000) {
        return __awaiter(this, void 0, void 0, function* () {
            yield DebugToolbar.driver.wait(selenium_webdriver_1.until.elementLocated(DebugToolbar.locators.DebugToolbar.ctor), timeout);
            return new DebugToolbar().wait(timeout);
        });
    }
    /**
     * Wait for the execution to pause at the next breakpoint
     */
    waitForBreakPoint() {
        return __awaiter(this, void 0, void 0, function* () {
            let btn = yield this.getDriver().wait(selenium_webdriver_1.until.elementLocated(DebugToolbar.locators.DebugToolbar.button('continue')));
            yield this.getDriver().wait(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const enabled = yield btn.isEnabled();
                    return enabled;
                }
                catch (err) {
                    btn = yield this.findElement(DebugToolbar.locators.DebugToolbar.button('continue'));
                }
            }));
        });
    }
    /**
     * Click Continue
     */
    continue() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (yield this.getButton('continue')).click();
        });
    }
    /**
     * Click Pause
     */
    pause() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (yield this.getButton('pause')).click();
        });
    }
    /**
     * Click Step Over
     */
    stepOver() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (yield this.getButton('step-over')).click();
        });
    }
    /**
     * Click Step Into
     */
    stepInto() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (yield this.getButton('step-into')).click();
        });
    }
    /**
     * Click Step Out
     */
    stepOut() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (yield this.getButton('step-out')).click();
        });
    }
    /**
     * Click Restart
     */
    restart() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (yield this.getButton('restart')).click();
        });
    }
    /**
     * Click Stop
     */
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (yield this.getButton('stop')).click();
        });
    }
    getButton(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.findElement(DebugToolbar.locators.DebugToolbar.button(name));
        });
    }
}
exports.DebugToolbar = DebugToolbar;
//# sourceMappingURL=DebugToolbar.js.map