"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiScmProvider = exports.SingleScmProvider = exports.NewScmView = void 0;
const ScmView_1 = require("./ScmView");
const selenium_webdriver_1 = require("selenium-webdriver");
const ElementWithContextMenu_1 = require("../../ElementWithContextMenu");
/**
 * New SCM view for code 1.47 onwards
 */
class NewScmView extends ScmView_1.ScmView {
    getProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            const inputs = yield this.findElements(NewScmView.locators.ScmView.inputField);
            if (inputs.length < 1) {
                return [];
            }
            const providers = yield this.findElements(NewScmView.locators.ScmView.multiScmProvider);
            if (inputs.length === 1 && providers.length < 1) {
                const element = yield this.findElement(NewScmView.locators.ScmView.singleScmProvider);
                return [yield new SingleScmProvider(element, this).wait()];
            }
            const elements = yield this.findElements(NewScmView.locators.ScmView.multiProviderItem);
            return Promise.all(elements.map((element) => __awaiter(this, void 0, void 0, function* () { return new MultiScmProvider(element, this).wait(); })));
        });
    }
}
exports.NewScmView = NewScmView;
/**
 * Implementation for a single SCM provider
 */
class SingleScmProvider extends ScmView_1.ScmProvider {
    /**
     * There is no title available for a single provider
     */
    getTitle() {
        return __awaiter(this, void 0, void 0, function* () {
            return '';
        });
    }
    /**
     * No title available for single provider
     */
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            return '';
        });
    }
    takeAction(title) {
        return __awaiter(this, void 0, void 0, function* () {
            const view = this.enclosingItem;
            const buttons = yield view.getTitlePart().getActions();
            const names = yield Promise.all(buttons.map((button) => __awaiter(this, void 0, void 0, function* () { return button.getTitle(); })));
            const index = names.findIndex(name => name === title);
            if (index > -1) {
                yield buttons[index].click();
                return true;
            }
            return false;
        });
    }
    openMoreActions() {
        return __awaiter(this, void 0, void 0, function* () {
            const view = this.enclosingItem;
            return new ScmView_1.MoreAction(view).openContextMenu();
        });
    }
    getChanges(staged = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const count = yield this.getChangeCount(staged);
            const elements = [];
            if (count > 0) {
                const locator = staged ? ScmView_1.ScmProvider.locators.ScmView.stagedChanges : ScmView_1.ScmProvider.locators.ScmView.changes;
                const header = yield this.findElement(locator);
                const startIndex = +(yield header.getAttribute('data-index'));
                const depth = +(yield header.getAttribute('aria-level')) + 1;
                const items = yield this.findElements(NewScmView.locators.ScmView.itemLevel(depth));
                for (const item of items) {
                    const index = +(yield item.getAttribute('data-index'));
                    if (index > startIndex && index <= startIndex + count) {
                        elements.push(item);
                    }
                }
            }
            return Promise.all(elements.map((element) => __awaiter(this, void 0, void 0, function* () { return new ScmView_1.ScmChange(element, this).wait(); })));
        });
    }
}
exports.SingleScmProvider = SingleScmProvider;
/**
 * Implementation of an SCM provider when multiple providers are available
 */
class MultiScmProvider extends ScmView_1.ScmProvider {
    takeAction(title) {
        return __awaiter(this, void 0, void 0, function* () {
            const actions = yield this.findElements(ScmView_1.ScmProvider.locators.ScmView.action);
            const names = yield Promise.all(actions.map((action) => __awaiter(this, void 0, void 0, function* () { return action.getAttribute('title'); })));
            const index = names.findIndex(item => item === title);
            if (index > -1) {
                yield actions[index].click();
                return true;
            }
            return false;
        });
    }
    openMoreActions() {
        return __awaiter(this, void 0, void 0, function* () {
            return new MultiMoreAction(this).openContextMenu();
        });
    }
    commitChanges(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = +(yield this.getAttribute('data-index')) + 1;
            const input = yield this.enclosingItem.findElement(NewScmView.locators.ScmView.itemIndex(index));
            yield input.clear();
            yield input.sendKeys(message);
            yield input.sendKeys(selenium_webdriver_1.Key.chord(ScmView_1.ScmProvider.ctlKey, selenium_webdriver_1.Key.ENTER));
        });
    }
    getChanges(staged = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const count = yield this.getChangeCount(staged);
            const elements = [];
            if (count > 0) {
                const index = +(yield this.getAttribute('data-index'));
                const locator = staged ? ScmView_1.ScmProvider.locators.ScmView.stagedChanges : ScmView_1.ScmProvider.locators.ScmView.changes;
                const headers = yield this.enclosingItem.findElements(locator);
                let header;
                for (const item of headers) {
                    if (+(yield item.getAttribute('data-index')) > index) {
                        header = item;
                    }
                }
                if (!header) {
                    return [];
                }
                const startIndex = +(yield header.getAttribute('data-index'));
                const depth = +(yield header.getAttribute('aria-level')) + 1;
                const items = yield this.enclosingItem.findElements(NewScmView.locators.ScmView.itemLevel(depth));
                for (const item of items) {
                    const index = +(yield item.getAttribute('data-index'));
                    if (index > startIndex && index <= startIndex + count) {
                        elements.push(item);
                    }
                }
            }
            return Promise.all(elements.map((element) => __awaiter(this, void 0, void 0, function* () { return new ScmView_1.ScmChange(element, this).wait(); })));
        });
    }
    getChangeCount(staged = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const locator = staged ? ScmView_1.ScmProvider.locators.ScmView.stagedChanges : ScmView_1.ScmProvider.locators.ScmView.changes;
            const rows = yield this.enclosingItem.findElements(locator);
            const index = +(yield this.getAttribute('data-index'));
            for (const row of rows) {
                if (+(yield row.getAttribute('data-index')) > index) {
                    const count = yield rows[0].findElement(ScmView_1.ScmChange.locators.ScmView.changeCount);
                    return +(yield count.getText());
                }
            }
            return 0;
        });
    }
}
exports.MultiScmProvider = MultiScmProvider;
class MultiMoreAction extends ElementWithContextMenu_1.ElementWithContexMenu {
    constructor(scm) {
        super(ScmView_1.MoreAction.locators.ScmView.multiMore, scm);
    }
}
//# sourceMappingURL=NewScmView.js.map