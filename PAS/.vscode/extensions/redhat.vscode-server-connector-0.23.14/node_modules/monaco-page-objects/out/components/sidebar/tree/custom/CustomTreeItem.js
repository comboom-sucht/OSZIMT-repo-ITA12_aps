"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomTreeItem = void 0;
const ViewItem_1 = require("../../ViewItem");
/**
 * View item in a custom-made content section (e.g. an extension tree view)
 */
class CustomTreeItem extends ViewItem_1.TreeItem {
    constructor(element, viewPart) {
        super(element, viewPart);
    }
    getLabel() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.findElement(CustomTreeItem.locators.CustomTreeSection.itemLabel).getText();
        });
    }
    getTooltip() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getAttribute(CustomTreeItem.locators.CustomTreeItem.tooltipAttribute);
        });
    }
    isExpanded() {
        return __awaiter(this, void 0, void 0, function* () {
            const attr = yield this.getAttribute(CustomTreeItem.locators.CustomTreeItem.expandedAttr);
            return attr === CustomTreeItem.locators.CustomTreeItem.expandedValue;
        });
    }
    getChildren() {
        return __awaiter(this, void 0, void 0, function* () {
            const rows = yield this.getChildItems(CustomTreeItem.locators.DefaultTreeSection.itemRow);
            const items = yield Promise.all(rows.map((row) => __awaiter(this, void 0, void 0, function* () { return new CustomTreeItem(row, this.enclosingItem).wait(); })));
            return items;
        });
    }
    isExpandable() {
        return __awaiter(this, void 0, void 0, function* () {
            const attr = yield this.getAttribute(CustomTreeItem.locators.CustomTreeItem.expandedAttr);
            return attr !== null;
        });
    }
}
exports.CustomTreeItem = CustomTreeItem;
//# sourceMappingURL=CustomTreeItem.js.map