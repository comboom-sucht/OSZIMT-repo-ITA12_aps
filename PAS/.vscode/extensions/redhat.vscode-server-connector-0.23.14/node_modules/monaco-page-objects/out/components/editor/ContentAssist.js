"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentAssistItem = exports.ContentAssist = void 0;
const __1 = require("../..");
/**
 * Page object representing the content assistant
 */
class ContentAssist extends __1.Menu {
    constructor(parent) {
        super(ContentAssist.locators.ContentAssist.constructor, parent);
    }
    /**
     * Get content assist item by name/text
     * @param name name/text to search by
     * @returns Promise resolving to ContentAssistItem object
     */
    getItem(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const items = yield this.getItems();
            for (const item of items) {
                if ((yield item.getLabel()) === name) {
                    return yield new ContentAssistItem(item, this).wait();
                }
            }
        });
    }
    /**
     * Get all visible content assist items
     * @returns Promise resolving to array of ContentAssistItem objects
     */
    getItems() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getDriver().wait(() => { return this.isLoaded(); });
            const elements = yield this.findElement(ContentAssist.locators.ContentAssist.itemRows)
                .findElements(ContentAssist.locators.ContentAssist.itemRow);
            return Promise.all(elements.map((item) => __awaiter(this, void 0, void 0, function* () {
                return yield new ContentAssistItem(item, this).wait();
            })));
        });
    }
    /**
     * Find if the content assist is still loading the suggestions
     * @returns promise that resolves to true when suggestions are done loading,
     * to false otherwise
     */
    isLoaded() {
        return __awaiter(this, void 0, void 0, function* () {
            const message = yield this.findElement(ContentAssist.locators.ContentAssist.message);
            if (yield message.isDisplayed()) {
                if ((yield message.getText()).startsWith('No suggestions')) {
                    return true;
                }
                return false;
            }
            return true;
        });
    }
}
exports.ContentAssist = ContentAssist;
/**
 * Page object for a content assist item
 */
class ContentAssistItem extends __1.MenuItem {
    constructor(item, contentAssist) {
        super(item, contentAssist);
        this.parent = contentAssist;
    }
    getLabel() {
        return __awaiter(this, void 0, void 0, function* () {
            const labelDiv = yield this.findElement(ContentAssist.locators.ContentAssist.itemLabel);
            return labelDiv.getText();
        });
    }
}
exports.ContentAssistItem = ContentAssistItem;
//# sourceMappingURL=ContentAssist.js.map