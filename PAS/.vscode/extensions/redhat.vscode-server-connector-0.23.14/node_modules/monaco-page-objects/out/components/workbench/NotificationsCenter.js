"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsCenter = void 0;
const AbstractElement_1 = require("../AbstractElement");
const Notification_1 = require("./Notification");
/**
 * Notifications center page object
 */
class NotificationsCenter extends AbstractElement_1.AbstractElement {
    constructor() {
        super(NotificationsCenter.locators.NotificationsCenter.constructor, NotificationsCenter.locators.Workbench.constructor);
    }
    /**
     * Close the notifications center
     * @returns Promise resolving when the center is closed
     */
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.isDisplayed()) {
                yield this.findElement(NotificationsCenter.locators.NotificationsCenter.close).click();
            }
        });
    }
    /**
     * Clear all notifications in the notifications center
     * Note that this will also hide the notifications center
     * @returns Promise resolving when the clear all button is pressed
     */
    clearAllNotifications() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.findElement(NotificationsCenter.locators.NotificationsCenter.clear).click();
        });
    }
    /**
     * Get all notifications of a given type
     * @param type type of the notifications to look for,
     * NotificationType.Any will retrieve all notifications
     *
     * @returns Promise resolving to array of Notification objects
     */
    getNotifications(type) {
        return __awaiter(this, void 0, void 0, function* () {
            const notifications = [];
            const elements = yield this.findElements(NotificationsCenter.locators.NotificationsCenter.row);
            for (const element of elements) {
                const not = new Notification_1.CenterNotification(element);
                if (type === Notification_1.NotificationType.Any || (yield not.getType()) === type) {
                    notifications.push(yield not.wait());
                }
            }
            return notifications;
        });
    }
}
exports.NotificationsCenter = NotificationsCenter;
//# sourceMappingURL=NotificationsCenter.js.map