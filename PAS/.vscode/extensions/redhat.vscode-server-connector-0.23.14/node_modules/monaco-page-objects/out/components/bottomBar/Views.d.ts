import { BottomBarPanel, ContentAssist } from "../..";
import { TextView, ChannelView } from "./AbstractViews";
import { ElementWithContexMenu } from "../ElementWithContextMenu";
/**
 * Output view of the bottom panel
 */
export declare class OutputView extends TextView {
    constructor(panel?: BottomBarPanel);
}
/**
 * Debug Console view on the bottom panel
 * Most functionality will only be available when a debug session is running
 */
export declare class DebugConsoleView extends ElementWithContexMenu {
    constructor(panel?: BottomBarPanel);
    /**
     * Get all text from the debug console
     */
    getText(): Promise<string>;
    /**
     * Clear the console of all text
     */
    clearText(): Promise<void>;
    /**
     * Type an expression into the debug console text area
     * @param expression expression in form of a string
     */
    setExpression(expression: string): Promise<void>;
    /**
     * Evaluate an expression:
     *  - if no argument is supplied, evaluate the current expression present in debug console text area
     *  - if a string argument is supplied, replace the current expression with the `expression` argument and evaluate
     *
     * @param expression expression to evaluate. To use existing contents of the debug console text area instead, don't define this argument
     */
    evaluateExpression(expression?: string): Promise<void>;
    /**
     * Create a content assist page object
     * @returns promise resolving to ContentAssist object
     */
    getContentAssist(): Promise<ContentAssist>;
}
/**
 * Terminal view on the bottom panel
 */
export declare class TerminalView extends ChannelView {
    constructor(panel?: BottomBarPanel);
    /**
     * Execute command in the internal terminal
     * @param command text of the command
     * @returns Promise resolving when the command is filled in and enter is pressed
     */
    executeCommand(command: string): Promise<void>;
    /**
     * Get all text from the internal terminal
     * Beware, no formatting.
     * @returns Promise resolving to all terminal text
     */
    getText(): Promise<string>;
    /**
     * Destroy the currently open terminal
     * @returns Promise resolving when Kill Terminal button is pressed
     */
    killTerminal(): Promise<void>;
    /**
     * Initiate new terminal creation
     * @returns Promise resolving when New Terminal button is pressed
     */
    newTerminal(): Promise<void>;
    getCurrentChannel(): Promise<string>;
    selectChannel(name: string): Promise<void>;
}
