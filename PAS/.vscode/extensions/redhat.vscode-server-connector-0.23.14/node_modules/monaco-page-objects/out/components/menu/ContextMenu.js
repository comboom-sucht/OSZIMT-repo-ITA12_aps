"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextMenuItem = exports.ContextMenu = void 0;
const __1 = require("../..");
const selenium_webdriver_1 = require("selenium-webdriver");
/**
 * Object representing a context menu
 */
class ContextMenu extends __1.Menu {
    constructor(containingElement) {
        super(ContextMenu.locators.ContextMenu.constructor, containingElement);
    }
    /**
     * Get context menu item by name
     * @param name name of the item to search by
     * @returns Promise resolving to ContextMenuItem object
     */
    getItem(name) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.findElement(ContextMenu.locators.ContextMenu.itemConstructor(name));
                return new ContextMenuItem(name, this).wait();
            }
            catch (err) {
                return undefined;
            }
        });
    }
    /**
     * Get all context menu items
     * @returns Promise resolving to array of ContextMenuItem objects
     */
    getItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const items = [];
            const elements = yield this.findElements(ContextMenu.locators.ContextMenu.itemElement);
            for (const element of elements) {
                const klass = yield element.getAttribute('class');
                if (klass.indexOf('disabled') < 0) {
                    const labelItem = yield element.findElement(ContextMenu.locators.ContextMenu.itemLabel);
                    items.push(yield new ContextMenuItem(yield labelItem.getAttribute(ContextMenu.locators.ContextMenu.itemText), this).wait());
                }
            }
            return items;
        });
    }
    /**
     * Close the context menu
     * @returns Promise resolving when the menu is closed
     */
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getDriver().actions().sendKeys(selenium_webdriver_1.Key.ESCAPE).perform();
            try {
                yield this.getDriver().wait(selenium_webdriver_1.until.elementIsNotVisible(this));
            }
            catch (err) {
                if (err.message.indexOf('stale element reference: element is not attached to the page document') < 0) {
                    throw err;
                }
            }
        });
    }
    /**
     * Wait for the menu to appear and load all its items
     */
    wait(timeout = 5000) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getDriver().wait(selenium_webdriver_1.until.elementIsVisible(this), timeout);
            let items = (yield this.getItems()).length;
            try {
                yield this.getDriver().wait(() => __awaiter(this, void 0, void 0, function* () {
                    const temp = (yield this.getItems()).length;
                    if (temp === items) {
                        return true;
                    }
                    else {
                        items = temp;
                        return false;
                    }
                }), 1000);
            }
            catch (err) {
                if (err instanceof selenium_webdriver_1.error.TimeoutError) {
                    // ignore timeout
                }
                else {
                    throw err;
                }
            }
            return this;
        });
    }
}
exports.ContextMenu = ContextMenu;
/**
 * Object representing an item of a context menu
 */
class ContextMenuItem extends __1.MenuItem {
    constructor(label, parent) {
        super(ContextMenu.locators.ContextMenu.itemConstructor(label), parent);
        this.parent = parent;
        this.label = label;
    }
    select() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.click();
            yield new Promise(res => setTimeout(res, 500));
            if (yield this.isNesting()) {
                return yield new ContextMenu(this).wait();
            }
            return undefined;
        });
    }
    isNesting() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.findElement(ContextMenu.locators.ContextMenu.itemNesting).isDisplayed();
            }
            catch (err) {
                return false;
            }
        });
    }
}
exports.ContextMenuItem = ContextMenuItem;
//# sourceMappingURL=ContextMenu.js.map