"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultTreeItem = void 0;
const ViewItem_1 = require("../../ViewItem");
/**
 * Default tree item base on the items in explorer view
 */
class DefaultTreeItem extends ViewItem_1.TreeItem {
    constructor(element, viewPart) {
        super(element, viewPart);
    }
    getLabel() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getAttribute(DefaultTreeItem.locators.DefaultTreeSection.itemLabel);
        });
    }
    getTooltip() {
        return __awaiter(this, void 0, void 0, function* () {
            const tooltip = yield this.findElement(DefaultTreeItem.locators.DefaultTreeItem.tooltip);
            return tooltip.getAttribute('title');
        });
    }
    isExpanded() {
        return __awaiter(this, void 0, void 0, function* () {
            const twistieClass = yield this.findElement(DefaultTreeItem.locators.DefaultTreeItem.twistie).getAttribute('class');
            return twistieClass.indexOf('collapsed') < 0;
        });
    }
    getChildren() {
        return __awaiter(this, void 0, void 0, function* () {
            const rows = yield this.getChildItems(DefaultTreeItem.locators.DefaultTreeSection.itemRow);
            const items = yield Promise.all(rows.map((row) => __awaiter(this, void 0, void 0, function* () { return new DefaultTreeItem(row, this.enclosingItem).wait(); })));
            return items;
        });
    }
    isExpandable() {
        return __awaiter(this, void 0, void 0, function* () {
            const twistieClass = yield this.findElement(DefaultTreeItem.locators.DefaultTreeItem.twistie).getAttribute('class');
            return twistieClass.indexOf('collapsible') > -1;
        });
    }
}
exports.DefaultTreeItem = DefaultTreeItem;
//# sourceMappingURL=DefaultTreeItem.js.map