"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = void 0;
const AbstractElement_1 = require("../AbstractElement");
/**
 * Abstract element representing a menu
 */
class Menu extends AbstractElement_1.AbstractElement {
    /**
     * Find whether the menu has an item of a given name
     * @param name name of the item to search for
     * @returns true if menu has an item with the given name, false otherwise
     */
    hasItem(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const item = yield this.getItem(name);
            return !!item && (item).isDisplayed();
        });
    }
    /**
     * Recursively select an item with a given path.
     *
     * E.g. calling select('File', 'Preferences', 'Settings') will
     * open the 'File' -> 'Preferences' submenus and then click on 'Settings'.
     *
     * Selection happens in order of the arguments, if one of the items in the middle
     * of the path has no children, the consequent path arguments will be ignored.
     *
     *
     * @param path path to the item to select, represented by a sequence of strings
     * @returns void if the last clicked item is a leaf, Menu item representing
     * its submenu otherwise
     */
    select(...path) {
        return __awaiter(this, void 0, void 0, function* () {
            let parent = this;
            for (const label of path) {
                const item = yield parent.getItem(label);
                if (!item)
                    return parent;
                yield Menu.driver.wait(function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        return (yield item.isDisplayed()) && (yield item.isEnabled());
                    });
                });
                const submenu = yield item.select();
                if (submenu) {
                    parent = submenu;
                }
                else {
                    return;
                }
            }
            return parent;
        });
    }
}
exports.Menu = Menu;
//# sourceMappingURL=Menu.js.map