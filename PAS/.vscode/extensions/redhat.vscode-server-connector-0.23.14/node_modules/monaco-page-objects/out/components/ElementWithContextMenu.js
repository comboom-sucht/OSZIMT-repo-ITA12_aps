"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementWithContexMenu = void 0;
const AbstractElement_1 = require("./AbstractElement");
const __1 = require("..");
const selenium_webdriver_1 = require("selenium-webdriver");
/**
 * Abstract element that has a context menu
 */
class ElementWithContexMenu extends AbstractElement_1.AbstractElement {
    /**
     * Open context menu on the element
     */
    openContextMenu() {
        return __awaiter(this, void 0, void 0, function* () {
            const workbench = yield this.getDriver().findElement(ElementWithContexMenu.locators.Workbench.constructor);
            const menus = yield workbench.findElements(ElementWithContexMenu.locators.ContextMenu.contextView);
            if (menus.length < 1) {
                yield this.getDriver().actions().click(this, selenium_webdriver_1.Button.RIGHT).perform();
                yield this.getDriver().wait(selenium_webdriver_1.until.elementLocated(ElementWithContexMenu.locators.ContextMenu.contextView), 2000);
                return new __1.ContextMenu(workbench).wait();
            }
            else if ((yield workbench.findElements(ElementWithContexMenu.locators.ContextMenu.viewBlock)).length > 0) {
                yield this.getDriver().actions().click(this, selenium_webdriver_1.Button.RIGHT).perform();
                try {
                    yield this.getDriver().wait(selenium_webdriver_1.until.elementIsNotVisible(this), 1000);
                }
                catch (err) {
                    if (err.message.indexOf('stale element reference: element is not attached to the page document') < 0) {
                        throw err;
                    }
                }
            }
            yield this.getDriver().actions().click(this, selenium_webdriver_1.Button.RIGHT).perform();
            return new __1.ContextMenu(workbench).wait();
        });
    }
}
exports.ElementWithContexMenu = ElementWithContexMenu;
//# sourceMappingURL=ElementWithContextMenu.js.map