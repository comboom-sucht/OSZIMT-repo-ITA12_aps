"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TitleActionButton = exports.ViewTitlePart = void 0;
const ElementWithContextMenu_1 = require("../ElementWithContextMenu");
const AbstractElement_1 = require("../AbstractElement");
const __1 = require("../..");
/**
 * Page object representing the top (title) part of a side bar view
 */
class ViewTitlePart extends ElementWithContextMenu_1.ElementWithContexMenu {
    constructor(view = new __1.SideBarView()) {
        super(ViewTitlePart.locators.ViewTitlePart.constructor, view);
    }
    /**
     * Returns the displayed title of the view
     * @returns Promise resolving to displayed title
     */
    getTitle() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.findElement(ViewTitlePart.locators.ViewTitlePart.title).getText();
        });
    }
    /**
     * Finds action buttons inside the view title part
     * @returns Promise resolving to array of TitleActionButton objects
     */
    getActions() {
        return __awaiter(this, void 0, void 0, function* () {
            const actions = [];
            const elements = yield this.findElements(ViewTitlePart.locators.ViewTitlePart.action);
            for (const element of elements) {
                const title = yield element.getAttribute(ViewTitlePart.locators.ViewTitlePart.actionLabel);
                actions.push(yield new TitleActionButton(title, this).wait());
            }
            return actions;
        });
    }
    /**
     * Finds an action button by title
     * @param title title of the button to search for
     * @returns Promise resolving to TitleActionButton object
     */
    getAction(title) {
        return __awaiter(this, void 0, void 0, function* () {
            return new TitleActionButton(title, this);
        });
    }
}
exports.ViewTitlePart = ViewTitlePart;
/**
 * Page object representing a button inside the view title part
 */
class TitleActionButton extends AbstractElement_1.AbstractElement {
    constructor(title, viewTitle) {
        super(TitleActionButton.locators.ViewTitlePart.actionContstructor(title), viewTitle);
        this.title = title;
    }
    /**
     * Get title of the button
     */
    getTitle() {
        return this.title;
    }
}
exports.TitleActionButton = TitleActionButton;
//# sourceMappingURL=ViewTitlePart.js.map