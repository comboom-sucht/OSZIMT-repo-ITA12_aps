"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModalDialog = void 0;
const AbstractElement_1 = require("../AbstractElement");
/**
 * Page Object for Custom Style Modal Dialogs (non-native)
 */
class ModalDialog extends AbstractElement_1.AbstractElement {
    constructor() {
        super(ModalDialog.locators.Dialog.constructor);
    }
    /**
     * Get the dialog's message in a Promise
     */
    getMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            const message = yield this.findElement(ModalDialog.locators.Dialog.message);
            return message.getText();
        });
    }
    /**
     * Get the details message in a Promise
     */
    getDetails() {
        return __awaiter(this, void 0, void 0, function* () {
            const details = yield this.findElement(ModalDialog.locators.Dialog.details);
            return details.getText();
        });
    }
    /**
     * Get the list of buttons as WebElements
     *
     * @returns Promise resolving to Array of WebElement items representing the buttons
     */
    getButtons() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.findElement(ModalDialog.locators.Dialog.buttonContainer).findElements(ModalDialog.locators.Dialog.button);
        });
    }
    /**
     * Push a button with given title if it exists
     *
     * @param title title/text of the button
     */
    pushButton(title) {
        return __awaiter(this, void 0, void 0, function* () {
            const buttons = yield this.getButtons();
            const titles = yield Promise.all(buttons.map((btn) => __awaiter(this, void 0, void 0, function* () { return btn.getAttribute('title'); })));
            const index = titles.findIndex(value => value === title);
            if (index > -1) {
                yield buttons[index].click();
            }
        });
    }
    /**
     * Close the dialog using the 'cross' button
     */
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            const btn = yield this.findElement(ModalDialog.locators.Dialog.closeButton);
            return btn.click();
        });
    }
}
exports.ModalDialog = ModalDialog;
//# sourceMappingURL=ModalDialog.js.map