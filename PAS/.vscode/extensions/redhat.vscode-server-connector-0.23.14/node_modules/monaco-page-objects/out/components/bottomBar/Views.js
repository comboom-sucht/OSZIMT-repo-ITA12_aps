"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerminalView = exports.DebugConsoleView = exports.OutputView = void 0;
const selenium_webdriver_1 = require("selenium-webdriver");
const __1 = require("../..");
const AbstractViews_1 = require("./AbstractViews");
const clipboard = require("clipboardy");
const ElementWithContextMenu_1 = require("../ElementWithContextMenu");
/**
 * Output view of the bottom panel
 */
class OutputView extends AbstractViews_1.TextView {
    constructor(panel = new __1.BottomBarPanel()) {
        super(OutputView.locators.OutputView.constructor, panel);
        this.actionsLabel = OutputView.locators.OutputView.actionsLabel;
    }
}
exports.OutputView = OutputView;
/**
 * Debug Console view on the bottom panel
 * Most functionality will only be available when a debug session is running
 */
class DebugConsoleView extends ElementWithContextMenu_1.ElementWithContexMenu {
    constructor(panel = new __1.BottomBarPanel()) {
        super(DebugConsoleView.locators.DebugConsoleView.constructor, panel);
    }
    /**
     * Get all text from the debug console
     */
    getText() {
        return __awaiter(this, void 0, void 0, function* () {
            const menu = yield this.openContextMenu();
            yield menu.select('Copy All');
            const text = yield clipboard.read();
            yield clipboard.write('');
            return text;
        });
    }
    /**
     * Clear the console of all text
     */
    clearText() {
        return __awaiter(this, void 0, void 0, function* () {
            const menu = yield this.openContextMenu();
            yield menu.select('Clear Console');
        });
    }
    /**
     * Type an expression into the debug console text area
     * @param expression expression in form of a string
     */
    setExpression(expression) {
        return __awaiter(this, void 0, void 0, function* () {
            const textarea = yield this.findElement(DebugConsoleView.locators.BottomBarViews.textArea);
            yield textarea.clear();
            yield textarea.sendKeys(expression);
        });
    }
    /**
     * Evaluate an expression:
     *  - if no argument is supplied, evaluate the current expression present in debug console text area
     *  - if a string argument is supplied, replace the current expression with the `expression` argument and evaluate
     *
     * @param expression expression to evaluate. To use existing contents of the debug console text area instead, don't define this argument
     */
    evaluateExpression(expression) {
        return __awaiter(this, void 0, void 0, function* () {
            const textarea = yield this.findElement(DebugConsoleView.locators.BottomBarViews.textArea);
            if (expression) {
                yield this.setExpression(expression);
            }
            yield textarea.sendKeys(selenium_webdriver_1.Key.ENTER);
        });
    }
    /**
     * Create a content assist page object
     * @returns promise resolving to ContentAssist object
     */
    getContentAssist() {
        return __awaiter(this, void 0, void 0, function* () {
            return new __1.ContentAssist(this).wait();
        });
    }
}
exports.DebugConsoleView = DebugConsoleView;
/**
 * Terminal view on the bottom panel
 */
class TerminalView extends AbstractViews_1.ChannelView {
    constructor(panel = new __1.BottomBarPanel()) {
        super(TerminalView.locators.TerminalView.constructor, panel);
        this.actionsLabel = TerminalView.locators.TerminalView.actionsLabel;
    }
    /**
     * Execute command in the internal terminal
     * @param command text of the command
     * @returns Promise resolving when the command is filled in and enter is pressed
     */
    executeCommand(command) {
        return __awaiter(this, void 0, void 0, function* () {
            const input = yield this.findElement(TerminalView.locators.TerminalView.textArea);
            yield input.sendKeys(command, selenium_webdriver_1.Key.ENTER);
        });
    }
    /**
     * Get all text from the internal terminal
     * Beware, no formatting.
     * @returns Promise resolving to all terminal text
     */
    getText() {
        return __awaiter(this, void 0, void 0, function* () {
            const workbench = new __1.Workbench();
            yield workbench.executeCommand('terminal select all');
            yield workbench.getDriver().sleep(500);
            yield workbench.executeCommand('terminal copy selection');
            yield workbench.getDriver().sleep(500);
            const text = clipboard.readSync();
            clipboard.writeSync('');
            return text;
        });
    }
    /**
     * Destroy the currently open terminal
     * @returns Promise resolving when Kill Terminal button is pressed
     */
    killTerminal() {
        return __awaiter(this, void 0, void 0, function* () {
            yield new __1.Workbench().executeCommand('terminal: kill the active terminal instance');
        });
    }
    /**
     * Initiate new terminal creation
     * @returns Promise resolving when New Terminal button is pressed
     */
    newTerminal() {
        return __awaiter(this, void 0, void 0, function* () {
            yield new __1.Workbench().executeCommand('terminal: create new integrated terminal');
            const combo = yield this.enclosingItem.findElements(AbstractViews_1.ChannelView.locators.BottomBarViews.channelCombo);
            if (combo.length < 1) {
                yield this.getDriver().wait(() => __awaiter(this, void 0, void 0, function* () {
                    const list = yield this.findElements(TerminalView.locators.TerminalView.tabList);
                    return list.length > 0;
                }), 5000);
            }
        });
    }
    getCurrentChannel() {
        const _super = Object.create(null, {
            getCurrentChannel: { get: () => super.getCurrentChannel }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const combo = yield this.enclosingItem.findElements(AbstractViews_1.ChannelView.locators.BottomBarViews.channelCombo);
            if (combo.length > 0) {
                return _super.getCurrentChannel.call(this);
            }
            const singleTerm = yield this.enclosingItem.findElements(TerminalView.locators.TerminalView.singleTab);
            if (singleTerm.length > 0) {
                return singleTerm[0].getText();
            }
            const list = yield this.findElement(TerminalView.locators.TerminalView.tabList);
            const row = yield list.findElement(TerminalView.locators.TerminalView.selectedRow);
            const label = (yield row.getAttribute('aria-label')).split(' ');
            return `${label[1]}: ${label[2]}`;
        });
    }
    selectChannel(name) {
        const _super = Object.create(null, {
            selectChannel: { get: () => super.selectChannel }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const combo = yield this.enclosingItem.findElements(AbstractViews_1.ChannelView.locators.BottomBarViews.channelCombo);
            if (combo.length > 0) {
                return _super.selectChannel.call(this, name);
            }
            const singleTerm = yield this.enclosingItem.findElements(TerminalView.locators.TerminalView.singleTab);
            if (singleTerm.length > 0) {
                return;
            }
            const matches = name.match(/.*(\d+).?\s.*/);
            if (matches === null || !matches[1]) {
                throw new Error(`Channel ${name} not found`);
            }
            const channelNumber = matches[1];
            const list = yield this.findElement(TerminalView.locators.TerminalView.tabList);
            const rows = yield list.findElements(TerminalView.locators.TerminalView.row);
            for (const row of rows) {
                const label = yield row.getAttribute('aria-label');
                if (label.includes(channelNumber)) {
                    yield row.click();
                    return;
                }
            }
            throw new Error(`Channel ${name} not found`);
        });
    }
}
exports.TerminalView = TerminalView;
//# sourceMappingURL=Views.js.map