"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextView = exports.ChannelView = void 0;
const selenium_webdriver_1 = require("selenium-webdriver");
const clipboard = require("clipboardy");
const ElementWithContextMenu_1 = require("../ElementWithContextMenu");
/**
 * View with channel selector
 */
class ChannelView extends ElementWithContextMenu_1.ElementWithContexMenu {
    /**
    * Get names of all selectable channels
    * @returns Promise resolving to array of strings - channel names
    */
    getChannelNames() {
        return __awaiter(this, void 0, void 0, function* () {
            const names = [];
            const elements = yield this.enclosingItem.findElement(ChannelView.locators.BottomBarViews.actionsContainer(this.actionsLabel))
                .findElements(ChannelView.locators.BottomBarViews.channelOption);
            for (const element of elements) {
                const disabled = yield element.getAttribute('disabled');
                if (!disabled) {
                    names.push(yield element.getAttribute('value'));
                }
            }
            return names;
        });
    }
    /**
     * Get name of the current channel
     * @returns Promise resolving to the current channel name
     */
    getCurrentChannel() {
        return __awaiter(this, void 0, void 0, function* () {
            let text;
            const combo = yield this.enclosingItem.findElement(ChannelView.locators.BottomBarViews.channelCombo);
            const rows = yield this.getOptions();
            for (const row of rows) {
                if ((yield row.getAttribute('class')).indexOf('focused') > -1) {
                    text = yield row.findElement(ChannelView.locators.BottomBarViews.channelText).getText();
                    break;
                }
            }
            yield combo.click();
            return text;
        });
    }
    /**
     * Select a channel using the selector combo
     * @param name name of the channel to open
     */
    selectChannel(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const rows = yield this.getOptions();
            for (let i = 0; i < rows.length; i++) {
                if ((yield rows[i].getAttribute('class')).indexOf('disabled') < 0) {
                    const text = yield (yield rows[i].findElement(ChannelView.locators.BottomBarViews.channelText)).getText();
                    if (name === text) {
                        yield rows[i].click();
                        yield new Promise(res => setTimeout(res, 500));
                        return;
                    }
                }
            }
            throw new Error(`Channel ${name} not found`);
        });
    }
    getOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            const combo = yield this.enclosingItem.findElement(ChannelView.locators.BottomBarViews.channelCombo);
            const workbench = yield this.getDriver().findElement(ChannelView.locators.Workbench.constructor);
            const menus = yield workbench.findElements(ChannelView.locators.ContextMenu.contextView);
            let menu;
            if (menus.length < 1) {
                yield combo.click();
                yield this.getDriver().sleep(500);
                menu = yield workbench.findElement(ChannelView.locators.ContextMenu.contextView);
                return menu.findElements(ChannelView.locators.BottomBarViews.channelRow);
            }
            else if (yield menus[0].isDisplayed()) {
                yield combo.click();
                yield this.getDriver().sleep(500);
            }
            yield combo.click();
            yield this.getDriver().sleep(500);
            menu = yield workbench.findElement(ChannelView.locators.ContextMenu.contextView);
            return menu.findElements(ChannelView.locators.BottomBarViews.channelRow);
        });
    }
}
exports.ChannelView = ChannelView;
/**
 * View with channel selection and text area
 */
class TextView extends ChannelView {
    /**
     * Get all text from the currently open channel
     * @returns Promise resolving to the view's text
     */
    getText() {
        return __awaiter(this, void 0, void 0, function* () {
            const textarea = yield this.findElement(ChannelView.locators.BottomBarViews.textArea);
            yield textarea.sendKeys(selenium_webdriver_1.Key.chord(TextView.ctlKey, 'a'));
            yield textarea.sendKeys(selenium_webdriver_1.Key.chord(TextView.ctlKey, 'c'));
            const text = clipboard.readSync();
            yield textarea.click();
            clipboard.writeSync('');
            return text;
        });
    }
    /**
     * Clear the text in the current channel
     * @returns Promise resolving when the clear text button is pressed
     */
    clearText() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.enclosingItem.findElement(ChannelView.locators.BottomBarViews.actionsContainer(this.actionsLabel))
                .findElement(ChannelView.locators.BottomBarViews.clearText).click();
        });
    }
}
exports.TextView = TextView;
//# sourceMappingURL=AbstractViews.js.map