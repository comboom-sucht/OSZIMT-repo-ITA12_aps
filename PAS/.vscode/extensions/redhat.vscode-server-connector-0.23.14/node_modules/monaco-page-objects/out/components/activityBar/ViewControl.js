"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewControl = void 0;
const __1 = require("../..");
const ElementWithContextMenu_1 = require("../ElementWithContextMenu");
const NewScmView_1 = require("../sidebar/scm/NewScmView");
/**
 * Page object representing a view container item in the activity bar
 */
class ViewControl extends ElementWithContextMenu_1.ElementWithContexMenu {
    constructor(element, bar) {
        super(element, bar);
    }
    /**
     * Opens the associated view if not already open
     * @returns Promise resolving to SideBarView object representing the opened view
     */
    openView() {
        return __awaiter(this, void 0, void 0, function* () {
            const klass = yield this.getAttribute(ViewControl.locators.ViewControl.attribute);
            if (klass.indexOf(ViewControl.locators.ViewControl.klass) < 0) {
                yield this.click();
                yield ViewControl.driver.sleep(500);
            }
            const view = yield new __1.SideBarView().wait();
            if ((yield view.findElements(ViewControl.locators.ViewControl.scmId)).length > 0) {
                if (ViewControl.versionInfo.browser === 'vscode' && ViewControl.versionInfo.version >= '1.47.0') {
                    return new NewScmView_1.NewScmView().wait();
                }
                return new __1.ScmView().wait();
            }
            if ((yield view.findElements(ViewControl.locators.ViewControl.debugId)).length > 0) {
                return new __1.DebugView().wait();
            }
            return view;
        });
    }
    /**
     * Closes the associated view if not already closed
     * @returns Promise resolving when the view closes
     */
    closeView() {
        return __awaiter(this, void 0, void 0, function* () {
            const klass = yield this.getAttribute(ViewControl.locators.ViewControl.attribute);
            if (klass.indexOf(ViewControl.locators.ViewControl.klass) > -1) {
                yield this.click();
            }
        });
    }
    /**
     * Returns the title of the associated view
     */
    getTitle() {
        return __awaiter(this, void 0, void 0, function* () {
            const badge = yield this.findElement(ViewControl.locators.ViewControl.badge);
            return badge.getAttribute('aria-label');
        });
    }
}
exports.ViewControl = ViewControl;
//# sourceMappingURL=ViewControl.js.map