"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowControls = void 0;
const AbstractElement_1 = require("../AbstractElement");
const __1 = require("../..");
/**
 * Page object for the windows controls part of the title bar
 */
class WindowControls extends AbstractElement_1.AbstractElement {
    constructor(bar = new __1.TitleBar()) {
        super(WindowControls.locators.WindowControls.constructor, bar);
    }
    /**
     * Use the minimize window button
     * @returns Promise resolving when minimize button is pressed
     */
    minimize() {
        return __awaiter(this, void 0, void 0, function* () {
            const minButton = this.findElement(WindowControls.locators.WindowControls.minimize);
            yield minButton.click();
        });
    }
    /**
     * Use the maximize window button if the window is not maximized
     * @returns Promise resolving when maximize button is pressed
     */
    maximize() {
        return __awaiter(this, void 0, void 0, function* () {
            let maxButton;
            try {
                maxButton = yield this.findElement(WindowControls.locators.WindowControls.maximize);
                yield maxButton.click();
            }
            catch (err) {
                console.log('Window is already maximized');
            }
        });
    }
    /**
     * Use the restore window button if the window is maximized
     * @returns Promise resolving when restore button is pressed
     */
    restore() {
        return __awaiter(this, void 0, void 0, function* () {
            let maxButton;
            try {
                maxButton = yield this.findElement(WindowControls.locators.WindowControls.restore);
                yield maxButton.click();
            }
            catch (err) {
                console.log('Window is not maximized');
            }
        });
    }
    /**
     * Use the window close button. Use at your own risk.
     * @returns Promise resolving when close button is pressed
     */
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            const closeButton = this.findElement(WindowControls.locators.WindowControls.close);
            yield closeButton.click();
        });
    }
}
exports.WindowControls = WindowControls;
//# sourceMappingURL=WindowControls.js.map