"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TitleBarItem = exports.TitleBar = void 0;
const selenium_webdriver_1 = require("selenium-webdriver");
const __1 = require("../..");
const Menu_1 = require("./Menu");
const MenuItem_1 = require("./MenuItem");
/**
 * Page object representing the custom VSCode title bar
 */
class TitleBar extends Menu_1.Menu {
    constructor() {
        super(TitleBar.locators.TitleBar.constructor, TitleBar.locators.Workbench.constructor);
    }
    /**
     * Get title bar item by name
     * @param name name of the item to search by
     * @returns Promise resolving to TitleBarItem object
     */
    getItem(name) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.findElement(TitleBar.locators.TitleBar.itemConstructor(name));
                return yield new TitleBarItem(name, this).wait();
            }
            catch (err) {
                return undefined;
            }
        });
    }
    /**
     * Get all title bar items
     * @returns Promise resolving to array of TitleBarItem objects
     */
    getItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const items = [];
            const elements = yield this.findElements(TitleBar.locators.TitleBar.itemElement);
            for (const element of elements) {
                if (yield element.isDisplayed()) {
                    items.push(yield new TitleBarItem(yield element.getAttribute(TitleBar.locators.TitleBar.itemLabel), this).wait());
                }
            }
            return items;
        });
    }
    /**
     * Get the window title
     * @returns Promise resolving to the window title
     */
    getTitle() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.findElement(TitleBar.locators.TitleBar.title).getText();
        });
    }
    /**
     * Get a reference to the WindowControls
     */
    getWindowControls() {
        return new __1.WindowControls(this);
    }
}
exports.TitleBar = TitleBar;
/**
 * Page object representing an item of the custom VSCode title bar
 */
class TitleBarItem extends MenuItem_1.MenuItem {
    constructor(label, parent) {
        super(TitleBar.locators.TitleBar.itemConstructor(label), parent);
        this.parent = parent;
        this.label = label;
    }
    select() {
        return __awaiter(this, void 0, void 0, function* () {
            const openMenus = yield this.getDriver().findElements(TitleBar.locators.ContextMenu.constructor);
            if (openMenus.length > 0 && openMenus[0].isDisplayed()) {
                yield this.getDriver().actions().sendKeys(selenium_webdriver_1.Key.ESCAPE).perform();
            }
            yield this.click();
            return new __1.ContextMenu(this).wait();
        });
    }
}
exports.TitleBarItem = TitleBarItem;
//# sourceMappingURL=TitleBar.js.map