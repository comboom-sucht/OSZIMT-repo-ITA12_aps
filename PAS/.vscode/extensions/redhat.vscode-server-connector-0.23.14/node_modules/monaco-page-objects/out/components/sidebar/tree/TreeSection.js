"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeSection = void 0;
const ViewSection_1 = require("../ViewSection");
/**
 * Abstract representation of a view section containing a tree
 */
class TreeSection extends ViewSection_1.ViewSection {
    openItem(...path) {
        return __awaiter(this, void 0, void 0, function* () {
            let items = [];
            for (let i = 0; i < path.length; i++) {
                const item = yield this.findItem(path[i], i + 1);
                if ((yield (item === null || item === void 0 ? void 0 : item.hasChildren())) && !(yield (item === null || item === void 0 ? void 0 : item.isExpanded()))) {
                    yield (item === null || item === void 0 ? void 0 : item.click());
                }
            }
            let currentItem = yield this.findItem(path[0], 1);
            for (let i = 0; i < path.length; i++) {
                if (!currentItem) {
                    throw new Error(`Item ${path[i]} not found`);
                }
                items = yield currentItem.getChildren();
                if (items.length < 1) {
                    yield currentItem.select();
                    return items;
                }
                if (i + 1 < path.length) {
                    currentItem = undefined;
                    for (const item of items) {
                        if ((yield item.getLabel()) === path[i + 1]) {
                            currentItem = item;
                            break;
                        }
                    }
                }
            }
            return items;
        });
    }
}
exports.TreeSection = TreeSection;
//# sourceMappingURL=TreeSection.js.map