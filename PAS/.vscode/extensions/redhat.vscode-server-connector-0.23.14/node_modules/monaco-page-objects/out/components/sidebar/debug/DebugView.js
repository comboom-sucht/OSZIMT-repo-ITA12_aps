"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugView = void 0;
const SideBarView_1 = require("../SideBarView");
/**
 * Page object representing the Run/Debug view in the side bar
 */
class DebugView extends SideBarView_1.SideBarView {
    /**
     * Get the title of the selected launch configuration
     * @returns Promise resolving to the title
     */
    getLaunchConfiguration() {
        return __awaiter(this, void 0, void 0, function* () {
            const action = yield this.getTitlePart().findElement(DebugView.locators.DebugView.launchCombo);
            const combo = yield action.findElement(DebugView.locators.DebugView.launchSelect);
            return combo.getAttribute('title');
        });
    }
    /**
     * Get titles of all available launch configurations
     * @returns Promise resolving to list of titles
     */
    getLaunchConfigurations() {
        return __awaiter(this, void 0, void 0, function* () {
            const action = yield this.getTitlePart().findElement(DebugView.locators.DebugView.launchCombo);
            const combo = yield action.findElement(DebugView.locators.DebugView.launchSelect);
            const configs = [];
            const options = yield combo.findElements(DebugView.locators.DebugView.launchOption);
            for (const option of options) {
                if (yield option.isEnabled()) {
                    configs.push(yield option.getAttribute('value'));
                }
            }
            return configs;
        });
    }
    /**
     * Select a given launch configuration
     * @param title title of the configuration to select
     */
    selectLaunchConfiguration(title) {
        return __awaiter(this, void 0, void 0, function* () {
            const action = yield this.getTitlePart().findElement(DebugView.locators.DebugView.launchCombo);
            const combo = yield action.findElement(DebugView.locators.DebugView.launchSelect);
            const option = yield combo.findElement(DebugView.locators.DebugView.optionByName(title));
            yield option.click();
        });
    }
    /**
     * Start Debugging using the current launch configuration
     */
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            const action = yield this.getTitlePart().findElement(DebugView.locators.DebugView.launchCombo);
            yield action.findElement(DebugView.locators.DebugView.startButton).click();
        });
    }
}
exports.DebugView = DebugView;
//# sourceMappingURL=DebugView.js.map