"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workbench = void 0;
const AbstractElement_1 = require("../AbstractElement");
const selenium_webdriver_1 = require("selenium-webdriver");
const TitleBar_1 = require("../menu/TitleBar");
const SideBarView_1 = require("../sidebar/SideBarView");
const ActivityBar_1 = require("../activityBar/ActivityBar");
const StatusBar_1 = require("../statusBar/StatusBar");
const EditorView_1 = require("../editor/EditorView");
const BottomBarPanel_1 = require("../bottomBar/BottomBarPanel");
const Notification_1 = require("./Notification");
const QuickOpenBox_1 = require("./input/QuickOpenBox");
const SettingsEditor_1 = require("../editor/SettingsEditor");
const InputBox_1 = require("./input/InputBox");
/**
 * Handler for general workbench related actions
 */
class Workbench extends AbstractElement_1.AbstractElement {
    constructor() {
        super(Workbench.locators.Workbench.constructor);
    }
    /**
     * Get a title bar handle
     */
    getTitleBar() {
        return new TitleBar_1.TitleBar();
    }
    /**
     * Get a side bar handle
     */
    getSideBar() {
        return new SideBarView_1.SideBarView();
    }
    /**
     * Get an activity bar handle
     */
    getActivityBar() {
        return new ActivityBar_1.ActivityBar();
    }
    /**
     * Get a status bar handle
     */
    getStatusBar() {
        return new StatusBar_1.StatusBar();
    }
    /**
     * Get a bottom bar handle
     */
    getBottomBar() {
        return new BottomBarPanel_1.BottomBarPanel();
    }
    /**
     * Get a handle for the editor view
     */
    getEditorView() {
        return new EditorView_1.EditorView();
    }
    /**
     * Get all standalone notifications (notifications outside the notifications center)
     * @returns Promise resolving to array of Notification objects
     */
    getNotifications() {
        return __awaiter(this, void 0, void 0, function* () {
            const notifications = [];
            let container;
            try {
                container = yield this.findElement(Workbench.locators.Workbench.notificationContainer);
            }
            catch (err) {
                return [];
            }
            const elements = yield container.findElements(Workbench.locators.Workbench.notificationItem);
            for (const element of elements) {
                notifications.push(yield new Notification_1.StandaloneNotification(element).wait());
            }
            return notifications;
        });
    }
    /**
     * Opens the notifications center
     * @returns Promise resolving to NotificationsCenter object
     */
    openNotificationsCenter() {
        return new StatusBar_1.StatusBar().openNotificationsCenter();
    }
    /**
     * Opens the settings editor
     *
     * @returns promise that resolves to a SettingsEditor instance
     */
    openSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.executeCommand('open user settings');
            yield Workbench.driver.wait(selenium_webdriver_1.until.elementLocated(Workbench.locators.Editor.constructor));
            yield new Promise((res) => setTimeout(res, 500));
            return new SettingsEditor_1.SettingsEditor();
        });
    }
    /**
     * Open the VS Code command line prompt
     * @returns Promise resolving to InputBox (vscode 1.44+) or QuickOpenBox (vscode up to 1.43) object
     */
    openCommandPrompt() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getDriver().actions().sendKeys(selenium_webdriver_1.Key.F1).perform();
            if (Workbench.versionInfo.browser.toLowerCase() === 'vscode' && Workbench.versionInfo.version >= '1.44.0') {
                return InputBox_1.InputBox.create();
            }
            return QuickOpenBox_1.QuickOpenBox.create();
        });
    }
    /**
     * Open the command prompt, type in a command and execute
     * @param command text of the command to be executed
     * @returns Promise resolving when the command prompt is confirmed
     */
    executeCommand(command) {
        return __awaiter(this, void 0, void 0, function* () {
            const prompt = yield this.openCommandPrompt();
            yield prompt.setText(`>${command}`);
            yield prompt.confirm();
        });
    }
}
exports.Workbench = Workbench;
//# sourceMappingURL=Workbench.js.map