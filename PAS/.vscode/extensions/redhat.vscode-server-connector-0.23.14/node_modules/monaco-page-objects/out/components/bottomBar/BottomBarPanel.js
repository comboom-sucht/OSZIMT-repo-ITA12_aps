"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BottomBarPanel = void 0;
const AbstractElement_1 = require("../AbstractElement");
const selenium_webdriver_1 = require("selenium-webdriver");
const TitleBar_1 = require("../menu/TitleBar");
const __1 = require("../..");
/**
 * Page object for the bottom view panel
 */
class BottomBarPanel extends AbstractElement_1.AbstractElement {
    constructor() {
        super(BottomBarPanel.locators.BottomBarPanel.constructor, BottomBarPanel.locators.Workbench.constructor);
    }
    /**
     * Open/Close the bottom bar panel
     * @param open true to open. false to close
     * @returns Promise resolving when the view visibility is toggled
     */
    toggle(open) {
        return __awaiter(this, void 0, void 0, function* () {
            const height = (yield this.getSize()).height;
            if ((open && height === 0) || !open && height > 0) {
                yield this.getDriver().actions().sendKeys(selenium_webdriver_1.Key.chord(BottomBarPanel.ctlKey, 'j')).perform();
                if (open) {
                    yield this.wait();
                }
                else {
                    yield this.getDriver().wait(selenium_webdriver_1.until.elementIsNotVisible(this));
                }
            }
        });
    }
    /**
     * Open the Problems view in the bottom panel
     * @returns Promise resolving to a ProblemsView object
     */
    openProblemsView() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.openTab(BottomBarPanel.locators.BottomBarPanel.problemsTab);
            return new __1.ProblemsView(this).wait();
        });
    }
    /**
     * Open the Output view in the bottom panel
     * @returns Promise resolving to OutputView object
     */
    openOutputView() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.openTab(BottomBarPanel.locators.BottomBarPanel.outputTab);
            return new __1.OutputView(this).wait();
        });
    }
    /**
     * Open the Debug Console view in the bottom panel
     * @returns Promise resolving to DebugConsoleView object
     */
    openDebugConsoleView() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.openTab(BottomBarPanel.locators.BottomBarPanel.debugTab);
            return new __1.DebugConsoleView(this).wait();
        });
    }
    /**
     * Open the Terminal view in the bottom panel
     * @returns Promise resolving to TerminalView object
     */
    openTerminalView() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.openTab(BottomBarPanel.locators.BottomBarPanel.terminalTab);
            return new __1.TerminalView(this).wait();
        });
    }
    /**
     * Maximize the the bottom panel if not maximized
     * @returns Promise resolving when the maximize button is pressed
     */
    maximize() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.resize(BottomBarPanel.locators.BottomBarPanel.maximize);
        });
    }
    /**
     * Restore the the bottom panel if maximized
     * @returns Promise resolving when the restore button is pressed
     */
    restore() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.resize(BottomBarPanel.locators.BottomBarPanel.restore);
        });
    }
    openTab(title) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.toggle(true);
            const tabContainer = yield this.findElement(BottomBarPanel.locators.BottomBarPanel.tabContainer);
            try {
                const tab = tabContainer.findElement(BottomBarPanel.locators.BottomBarPanel.tab(title));
                yield tab.click();
            }
            catch (err) {
                yield new TitleBar_1.TitleBar().select('View', title);
            }
        });
    }
    resize(label) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.toggle(true);
            let action;
            try {
                action = yield this.findElement(BottomBarPanel.locators.BottomBarPanel.actions)
                    .findElement(BottomBarPanel.locators.BottomBarPanel.action(label));
            }
            catch (err) {
                // the panel is already maximized
            }
            if (action) {
                yield action.click();
            }
        });
    }
}
exports.BottomBarPanel = BottomBarPanel;
//# sourceMappingURL=BottomBarPanel.js.map