"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickOpenBox = void 0;
const __1 = require("../../..");
const selenium_webdriver_1 = require("selenium-webdriver");
/**
 * @deprecated as of VS Code 1.44.0, quick open box has been replaced with input box
 * The quick open box variation of the input
 */
class QuickOpenBox extends __1.Input {
    constructor() {
        super(QuickOpenBox.locators.QuickOpenBox.constructor, QuickOpenBox.locators.Workbench.constructor);
    }
    /**
     * Construct a new QuickOpenBox instance after waiting for its underlying element to exist
     * Use when a quick open box is scheduled to appear.
     */
    static create() {
        return __awaiter(this, void 0, void 0, function* () {
            yield QuickOpenBox.driver.wait(selenium_webdriver_1.until.elementLocated(QuickOpenBox.locators.QuickOpenBox.constructor));
            return new QuickOpenBox().wait();
        });
    }
    hasProgress() {
        return __awaiter(this, void 0, void 0, function* () {
            const klass = yield this.findElement(QuickOpenBox.locators.QuickOpenBox.progress)
                .getAttribute('class');
            return klass.indexOf('done') < 0;
        });
    }
    getQuickPicks() {
        return __awaiter(this, void 0, void 0, function* () {
            const picks = [];
            const tree = yield this.getDriver().wait(selenium_webdriver_1.until.elementLocated(QuickOpenBox.locators.QuickOpenBox.quickList), 1000);
            const elements = yield tree.findElements(QuickOpenBox.locators.QuickOpenBox.row);
            for (const element of elements) {
                const index = +(yield element.getAttribute('aria-posinset'));
                if (yield element.isDisplayed()) {
                    picks.push(yield new __1.QuickPickItem(index, this).wait());
                }
            }
            return picks;
        });
    }
}
exports.QuickOpenBox = QuickOpenBox;
//# sourceMappingURL=QuickOpenBox.js.map