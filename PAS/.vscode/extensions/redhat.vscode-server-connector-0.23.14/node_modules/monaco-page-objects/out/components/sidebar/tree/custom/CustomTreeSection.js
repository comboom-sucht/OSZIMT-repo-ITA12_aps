"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomTreeSection = void 0;
const TreeSection_1 = require("../TreeSection");
const CustomTreeItem_1 = require("./CustomTreeItem");
const selenium_webdriver_1 = require("selenium-webdriver");
/**
 * Custom tree view, e.g. contributed by an extension
 */
class CustomTreeSection extends TreeSection_1.TreeSection {
    getVisibleItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const items = [];
            const elements = yield this.findElements(CustomTreeSection.locators.CustomTreeSection.itemRow);
            for (const element of elements) {
                items.push(yield new CustomTreeItem_1.CustomTreeItem(element, this).wait());
            }
            return items;
        });
    }
    findItem(label, maxLevel = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.expand();
            const container = yield this.findElement(CustomTreeSection.locators.CustomTreeSection.rowContainer);
            yield container.sendKeys(selenium_webdriver_1.Key.HOME);
            let item = undefined;
            const elements = yield container.findElements(CustomTreeSection.locators.CustomTreeSection.itemRow);
            for (const element of elements) {
                const temp = yield element.findElements(CustomTreeSection.locators.CustomTreeSection.rowWithLabel(label));
                if (temp.length > 0) {
                    const level = +(yield temp[0].getAttribute(CustomTreeSection.locators.ViewSection.level));
                    if (maxLevel < 1 || level <= maxLevel) {
                        item = yield new CustomTreeItem_1.CustomTreeItem(element, this).wait();
                    }
                }
            }
            return item;
        });
    }
}
exports.CustomTreeSection = CustomTreeSection;
//# sourceMappingURL=CustomTreeSection.js.map