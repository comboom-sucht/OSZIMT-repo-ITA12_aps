"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputBox = void 0;
const __1 = require("../../..");
const selenium_webdriver_1 = require("selenium-webdriver");
/**
 * Plain input box variation of the input page object
 */
class InputBox extends __1.Input {
    constructor() {
        super(InputBox.locators.InputBox.constructor, InputBox.locators.Workbench.constructor);
    }
    /**
     * Construct a new InputBox instance after waiting for its underlying element to exist
     * Use when an input box is scheduled to appear.
     */
    static create() {
        return __awaiter(this, void 0, void 0, function* () {
            yield InputBox.driver.wait(selenium_webdriver_1.until.elementLocated(InputBox.locators.InputBox.constructor), 5000);
            return new InputBox().wait();
        });
    }
    /**
     * Get the message below the input field
     */
    getMessage() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.findElement(InputBox.locators.InputBox.message).getText();
        });
    }
    hasProgress() {
        return __awaiter(this, void 0, void 0, function* () {
            const klass = yield this.findElement(InputBox.locators.InputBox.progress)
                .getAttribute('class');
            return klass.indexOf('done') < 0;
        });
    }
    getQuickPicks() {
        return __awaiter(this, void 0, void 0, function* () {
            const picks = [];
            const elements = yield this.findElement(InputBox.locators.InputBox.quickList)
                .findElement(InputBox.locators.InputBox.rows)
                .findElements(InputBox.locators.InputBox.row);
            for (const element of elements) {
                if (yield element.isDisplayed()) {
                    picks.push(yield new __1.QuickPickItem(+(yield element.getAttribute('data-index')), this).wait());
                }
            }
            return picks;
        });
    }
    /**
     * Find whether the input is showing an error
     * @returns Promise resolving to notification message
     */
    hasError() {
        return __awaiter(this, void 0, void 0, function* () {
            const klass = yield this.findElement(InputBox.locators.Input.inputBox).getAttribute('class');
            return klass.indexOf('error') > -1;
        });
    }
    /**
     * Check if the input field is masked (input type password)
     * @returns Promise resolving to notification message
     */
    isPassword() {
        return __awaiter(this, void 0, void 0, function* () {
            const input = yield this.findElement(InputBox.locators.Input.input);
            return (yield input.getAttribute('type')) === 'password';
        });
    }
}
exports.InputBox = InputBox;
//# sourceMappingURL=InputBox.js.map