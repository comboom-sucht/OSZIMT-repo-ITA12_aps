"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityBar = void 0;
const __1 = require("../..");
const ElementWithContextMenu_1 = require("../ElementWithContextMenu");
/**
 * Page object representing the left side activity bar in VS Code
 */
class ActivityBar extends ElementWithContextMenu_1.ElementWithContexMenu {
    constructor() {
        super(ActivityBar.locators.ActivityBar.constructor, ActivityBar.locators.Workbench.constructor);
    }
    /**
     * Find all view containers displayed in the activity bar
     * @returns Promise resolving to array of ViewControl objects
     */
    getViewControls() {
        return __awaiter(this, void 0, void 0, function* () {
            const views = [];
            const viewContainer = yield this.findElement(ActivityBar.locators.ActivityBar.viewContainer);
            for (const element of yield viewContainer.findElements(ActivityBar.locators.ActivityBar.actionItem)) {
                views.push(yield new __1.ViewControl(element, this).wait());
            }
            return views;
        });
    }
    /**
     * Find a view container with a given title
     * @param name title of the view
     * @returns Promise resolving to ViewControl object representing the view selector, undefined if not found
     */
    getViewControl(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const controls = yield this.getViewControls();
            const names = yield Promise.all(controls.map((item) => __awaiter(this, void 0, void 0, function* () {
                return item.getTitle();
            })));
            const index = names.findIndex((value) => value.indexOf(name) > -1);
            if (index > -1) {
                return controls[index];
            }
            return undefined;
        });
    }
    /**
     * Find all global action controls displayed on the bottom of the activity bar
     * @returns Promise resolving to array of ActionsControl objects
     */
    getGlobalActions() {
        return __awaiter(this, void 0, void 0, function* () {
            const actions = [];
            const actionContainer = yield this.findElement(ActivityBar.locators.ActivityBar.actionsContainer);
            for (const element of yield actionContainer.findElements(ActivityBar.locators.ActivityBar.actionItem)) {
                actions.push(yield new __1.ActionsControl(element, this).wait());
            }
            return actions;
        });
    }
    /**
     * Find an action control with a given title
     * @param name title of the global action
     * @returns Promise resolving to ActionsControl object representing the action selector, undefined if not found
     */
    getGlobalAction(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const actions = yield this.getGlobalActions();
            const names = yield Promise.all(actions.map((item) => __awaiter(this, void 0, void 0, function* () {
                return item.getTitle();
            })));
            const index = names.findIndex((value) => value.indexOf(name) > -1);
            if (index > -1) {
                return actions[index];
            }
            return undefined;
        });
    }
}
exports.ActivityBar = ActivityBar;
//# sourceMappingURL=ActivityBar.js.map