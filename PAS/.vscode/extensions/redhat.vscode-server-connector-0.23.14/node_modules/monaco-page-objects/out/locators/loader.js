"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocatorLoader = void 0;
const fs = require("fs-extra");
const path = require("path");
const compareVersions = require("compare-versions");
const clone = require("clone-deep");
/**
 * Utility for loading locators for a given vscode version
 */
class LocatorLoader {
    /**
     * Construct new loader for a given vscode version
     * @param version select version of vscode
     */
    constructor(version, baseVersion, baseFolder) {
        this.version = version;
        if (version.endsWith('-insider')) {
            this.version = version.substring(0, version.indexOf('-insider'));
        }
        this.baseVersion = baseVersion;
        this.baseFolder = path.resolve(baseFolder);
        const temp = require(path.resolve(baseFolder, baseVersion));
        this.locators = temp.locators;
    }
    /**
     * Loads locators for the selected vscode version
     * @returns object containing all locators
     */
    loadLocators() {
        let versions = fs.readdirSync(this.baseFolder)
            .filter((file) => file.endsWith('.js'))
            .map((file) => path.basename(file, '.js'));
        if (compareVersions(this.baseVersion, this.version) === 0) {
            return this.locators;
        }
        if (compareVersions(this.baseVersion, this.version) < 0) {
            versions = versions.filter((ver) => compareVersions(this.baseVersion, ver) < 0 &&
                compareVersions(ver, this.version) <= 0)
                .sort(compareVersions);
        }
        else {
            versions = versions.filter((ver) => compareVersions(this.baseVersion, ver) > 0 &&
                compareVersions(ver, this.version) >= 0)
                .sort(compareVersions).reverse();
        }
        for (let i = 0; i < versions.length; i++) {
            const diff = require(path.join(this.baseFolder, versions[i])).diff;
            const newLocators = mergeLocators(this.locators, diff);
            this.locators = newLocators;
        }
        return this.locators;
    }
}
exports.LocatorLoader = LocatorLoader;
function mergeLocators(original, diff) {
    const target = clone(original);
    const targetDiff = diff.locators;
    merge(target, targetDiff);
    return target;
}
function merge(target, obj) {
    for (const key in obj) {
        if (key === '__proto__' || !Object.prototype.hasOwnProperty.call(obj, key)) {
            continue;
        }
        let oldVal = obj[key];
        let newVal = target[key];
        if (typeof (newVal) === 'object' && typeof (oldVal) === 'object') {
            target[key] = merge(newVal, oldVal);
        }
        else {
            target[key] = clone(oldVal);
        }
    }
    return target;
}
//# sourceMappingURL=loader.js.map