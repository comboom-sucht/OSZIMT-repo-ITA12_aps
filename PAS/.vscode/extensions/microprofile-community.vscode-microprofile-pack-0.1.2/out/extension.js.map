{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"",".././src/util/constants.ts",".././src/extension.ts",".././src/overview/OverviewPage.ts","../external \"util\"","../external \"fs\"",".././src/util/commands.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","MICROPROFILE_SHOW_OVERVIEW_CONFIGURATION","SET_SHOW_ON_STARTUP_COMMAND","INSTALL_EXT_COMMAND","SYNC_CHECKBOX_VALUE","SYNC_EXT_VISIBILITY","context","subscriptions","push","vscode","commands","registerCommand","OverviewPage","showOverview","createMicroProfileStarterProjectCmdHandler","generateMicroProfileRESTClient","url","openUrl","extensionName","installExtension","workspace","getConfiguration","executeCommand","this","_context","_panelView","createOverviewPage","initializeOverview","currentPanel","reveal","panel","window","createWebviewPanel","viewColumn","ViewColumn","One","preserveFocus","enableScripts","enableCommandUris","retainContextWhenHidden","onDidDispose","undefined","resourceUri","asAbsolutePath","syncCheckboxValue","webviewPanel","checkboxValue","webview","postMessage","command","syncExtensionVisibility","installedExtensions","extensions","all","map","ext","id","toLowerCase","html","loadTextFromFile","onDidChange","e","onDidChangeConfiguration","event","affectsConfiguration","onDidReceiveMessage","update","visibility","ConfigurationTarget","Global","extName","readFile","toString","util","promisify","validateAndRecommendExtension","message","isForce","getExtension","isExtensionInstalled","showInformationMessage","recommendExtension","withProgress","location","ProgressLocation","Notification","title","progress","then","Uri","parse"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"vscode\");","export const MICROPROFILE_SHOW_OVERVIEW_CONFIGURATION = \"microprofile.alwaysShowOverview\";\n\nexport const SET_SHOW_ON_STARTUP_COMMAND = \"setShowOnStartup\";\nexport const INSTALL_EXT_COMMAND = \"installExtension\";\nexport const SYNC_CHECKBOX_VALUE = \"syncCheckboxValue\";\nexport const SYNC_EXT_VISIBILITY = \"syncExtensionVisibility\";","import * as vscode from \"vscode\";\nimport { OverviewPage } from \"./overview/OverviewPage\";\nimport { createMicroProfileStarterProjectCmdHandler, generateMicroProfileRESTClient, installExtension, openUrl } from \"./util/commands\";\nimport { MICROPROFILE_SHOW_OVERVIEW_CONFIGURATION } from \"./util/constants\";\n\nexport function activate(context: vscode.ExtensionContext): void {\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"microprofile.overview\", (async () => {\n      OverviewPage.showOverview(context);\n    }))\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"microprofile.helper.createMicroProfileStarterProject\", (async () => {\n      createMicroProfileStarterProjectCmdHandler(context);\n    }))\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"microprofile.helper.generateMicroProfileRESTClient\", (async () => {\n      generateMicroProfileRESTClient(context);\n    }))\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"microprofile.helper.openUrl\", (async (url) => {\n      openUrl(context, url);\n    }))\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"microprofile.helper.installExtension\", (async (extensionName) => {\n      installExtension(context, extensionName);\n    }))\n  );\n\n  let showOverviewPage = vscode.workspace.getConfiguration().get<boolean>(MICROPROFILE_SHOW_OVERVIEW_CONFIGURATION);\n  if (showOverviewPage) {\n    vscode.commands.executeCommand(\"microprofile.overview\");\n  }\n}\n\n// this method is called when the extension is deactivated\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function deactivate(): void { }","import * as vscode from \"vscode\";\nimport * as util from \"util\";\nimport { readFile as fsReadFile } from \"fs\";\nimport { INSTALL_EXT_COMMAND, MICROPROFILE_SHOW_OVERVIEW_CONFIGURATION, SET_SHOW_ON_STARTUP_COMMAND, SYNC_CHECKBOX_VALUE, SYNC_EXT_VISIBILITY } from \"../util/constants\";\n\nexport class OverviewPage {\n\n  public static currentPanel: OverviewPage | undefined;\n\n  private _context: vscode.ExtensionContext;\n  private _panelView: vscode.WebviewPanel;\n  private static readFile = util.promisify(fsReadFile);\n\n  public static showOverview(context: vscode.ExtensionContext) {\n    \n    // show overview view if it already exists\n    if (OverviewPage.currentPanel) {\n      OverviewPage.currentPanel._panelView.reveal();\n      return;\n    }\n\n    // create a new overview page if it does not already exist\n    OverviewPage.currentPanel = new OverviewPage(context);\n  }\n\n  private constructor (context: vscode.ExtensionContext) {\n    this._context = context;\n    this._panelView = this.createOverviewPage();\n    this.initializeOverview();\n  }\n\n  public createOverviewPage(): vscode.WebviewPanel {\n    // create overview view\n    const panel = vscode.window.createWebviewPanel(\n      \"microprofile.overview\",\n      \"MicroProfile Overview\",\n      {\n        viewColumn: vscode.ViewColumn.One,\n        preserveFocus: true\n      },\n      {\n        enableScripts: true,\n        enableCommandUris: true,\n        retainContextWhenHidden: true\n      }\n    );\n    panel.onDidDispose(() => {\n      OverviewPage.currentPanel = undefined;\n    });\n\n    return panel;\n  }\n\n  private async initializeOverview() {\n    const resourceUri = this._context.asAbsolutePath(\"./out/assets/overview/index.html\");\n    this._panelView.webview.html = await OverviewPage.loadTextFromFile(resourceUri);\n\n    // ensures checkbox value matches the corresponding alwaysShowOverview setting\n    function syncCheckboxValue(webviewPanel: vscode.WebviewPanel) {\n      let checkboxValue = vscode.workspace.getConfiguration().get<boolean>(MICROPROFILE_SHOW_OVERVIEW_CONFIGURATION);\n      if (checkboxValue !== undefined) {\n        webviewPanel.webview.postMessage({\n          command: SYNC_CHECKBOX_VALUE,\n          checkboxValue: checkboxValue\n        })\n      }\n    }\n\n    // ensures prompt to install extensions displayed in overview page are only shown\n    // if they are not installed\n    function syncExtensionVisibility(webviewPanel: vscode.WebviewPanel) {\n      const installedExtensions = vscode.extensions.all.map(ext => ext.id.toLowerCase());\n      webviewPanel.webview.postMessage({\n        command: SYNC_EXT_VISIBILITY,\n        installedExtensions: installedExtensions\n      });\n    }\n\n    syncCheckboxValue(this._panelView);\n    syncExtensionVisibility(this._panelView);\n\n    // monitor extensions installed\n    this._context.subscriptions.push(vscode.extensions.onDidChange(e => {\n      syncExtensionVisibility(this._panelView);\n    }));\n\n    // monitor workspace configuration for alwaysShowOverview setting\n    this._context.subscriptions.push(vscode.workspace.onDidChangeConfiguration((event: vscode.ConfigurationChangeEvent) => {\n      if (event.affectsConfiguration(MICROPROFILE_SHOW_OVERVIEW_CONFIGURATION)) {\n        syncCheckboxValue(this._panelView);\n      }\n    }));\n\n    this._context.subscriptions.push(this._panelView.webview.onDidReceiveMessage(async (e) => {\n      if (e.command === SET_SHOW_ON_STARTUP_COMMAND) {\n        // set configuration value\n        vscode.workspace.getConfiguration().update(MICROPROFILE_SHOW_OVERVIEW_CONFIGURATION, e.visibility, vscode.ConfigurationTarget.Global);\n      }\n      if (e.command === INSTALL_EXT_COMMAND) {\n        await vscode.commands.executeCommand(\"microprofile.helper.installExtension\", e.extName);\n      }\n    }));\n  }\n\n  private static async loadTextFromFile(resourceUri: string) {\n    let buffer = await this.readFile(resourceUri);\n    return buffer.toString();\n  }\n\n}\n\n","module.exports = require(\"util\");","module.exports = require(\"fs\");","import * as vscode from \"vscode\";\n\n/**\n * Check if MicroProfile Starter has been installed, if it has\n * execute the MicroProfile Starter command. If it is not installed,\n * prompt user to install.\n * \n * @param context vscode extension context\n */\nexport async function createMicroProfileStarterProjectCmdHandler(context: vscode.ExtensionContext) {\n    if (!await validateAndRecommendExtension(\"microProfile-community.mp-starter-vscode-ext\", \"MicroProfile Starter for Visual Studio Code is recommended to generate starter projects for Eclipse MicroProfile.\", true)) {\n        return;\n    }\n    await vscode.commands.executeCommand(\"extension.microProfileStarter\");\n}\n\n/**\n * Check if Generator for MicroProfile Rest Client has been installed, if it has\n * execute the Generate a REST Client command. If it is not installed,\n * prompt user to install.\n * \n * @param context vscode extension context\n */\nexport async function generateMicroProfileRESTClient(context: vscode.ExtensionContext) {\n    if (!await validateAndRecommendExtension(\"microProfile-community.mp-rest-client-generator-vscode-ext\", \"Generator for MicroProfile Rest Client is recommended to generate MicroProfile REST Client Interface template.\", true)) {\n        return;\n    }\n    await vscode.commands.executeCommand(\"microprofile.restclient.generate\");\n}\n\nexport async function installExtension(context: vscode.ExtensionContext, extensionName: string) {\n    return vscode.window.withProgress({ location: vscode.ProgressLocation.Notification, title: `Installing ${extensionName}...` }, progress => {\n        return vscode.commands.executeCommand(\"workbench.extensions.installExtension\", extensionName);\n    }).then(() => {\n        vscode.window.showInformationMessage(`Successfully installed ${extensionName}.`);\n    });\n}\n\nexport async function openUrl(context: vscode.ExtensionContext, url: string) {\n    vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(url));\n}\n\nasync function validateAndRecommendExtension(extName: string, message: string, isForce: boolean = false) {\n    if (isExtensionInstalled(extName)) {\n        return true;\n    }\n\n    await recommendExtension(extName, message);\n    return false;\n}\n\nfunction isExtensionInstalled(extName: string) {\n    return !!vscode.extensions.getExtension(extName);\n}\n\nasync function recommendExtension(extName: string, message: string): Promise<void> {\n    const action = \"Install\";\n    const answer = await vscode.window.showInformationMessage(message, action);\n    if (answer === action) {\n        await vscode.commands.executeCommand(\"microprofile.helper.installExtension\", extName, extName);\n    }\n}"],"sourceRoot":""}