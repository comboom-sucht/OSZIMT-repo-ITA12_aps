import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class UserManagement {
	
	private HashMap<String, String> users = new HashMap<String, String>();
	private File  filename = new File("um.oszuser");
	private String password = "v$Eez6!BX&cA3ZJ%Ztw87%MwbpbsAkjz2PaECW&grSq@DGBHisgjJwC@Kq@R4Ufz";
	
	public UserManagement() {
		loadUsers();
	}
	
	public void addUser(String username, String password) {
		users.put(username, password);
		saveUsers();
	}
	
	public void removeUser(String username) {
		users.remove(username);
		saveUsers();
	}
	
	public boolean userExists(String username, String password) {
		return users.get(username).equals(password);
	}
	
	private void loadUsers() {
		try {
			byte[] encryptedData = FileHandler.readFile(filename);
			String decryptedText = SecureEnclave.decrypt(password, encryptedData);
			// Deserialize the decrypted text into a HashMap
			users = deserializeUsers(decryptedText);
		} catch (IOException e) {
			// Handle file read error
			e.printStackTrace();
		} catch (SecurityException e) {
			// Handle decryption error
			e.printStackTrace();
		}
	}
	
	private void saveUsers() {
		// Serialize the users HashMap into a string
		// Encrypt the serialized users data
		byte[] encryptedData = SecureEnclave.encrypt(password, users.toString());
		try {
			FileHandler.writeFile(filename, encryptedData);
		} catch (IOException e) {
			// Handle file write error
			e.printStackTrace();
		}
	}
	
	
	private static HashMap HashMapFrom(String s){
	    HashMap base = new HashMap(); //result
	    int dismiss = 0; //dismiss tracker
	    StringBuilder tmpVal = new StringBuilder(); //each val holder
	    StringBuilder tmpKey = new StringBuilder(); //each key holder

	    for (String next:s.split("")){ //each of vale
	        if(dismiss==0){ //if not writing value
	            if (next.equals("=")) //start writing value
	                dismiss=1; //update tracker
	            else
	                tmpKey.append(next); //writing key
	        } else {
	            if (next.equals("{")) //if it's value so need to dismiss
	                dismiss++;
	            else if (next.equals("}")) //value closed so need to focus
	                dismiss--;
	            else if (next.equals(",") //declaration ends
	                    && dismiss==1) {
	                //by the way you have to create something to correct the type
	                Object ObjVal = object.valueOf(tmpVal.toString()); //correct the type of object
	                base.put(tmpKey.toString(),ObjVal);//declaring
	                tmpKey = new StringBuilder();
	                tmpVal = new StringBuilder();
	                dismiss--;
	                continue; //next :)
	            }
	            tmpVal.append(next); //writing value
	        }
	    }
	    Object objVal = object.valueOf(tmpVal.toString()); //same as here
	    base.put(tmpKey.toString(), objVal); //leftovers
	    return base;
	}
}

