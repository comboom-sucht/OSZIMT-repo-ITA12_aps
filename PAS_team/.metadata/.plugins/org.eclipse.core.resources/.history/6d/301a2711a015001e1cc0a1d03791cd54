import java.awt.EventQueue;

import javax.swing.JFrame;
import java.awt.Window.Type;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException; 
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Scanner;
import java.awt.FlowLayout;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JEditorPane;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JPasswordField;

public class CipherWindow {

	private JFrame frmOszimtcrypter;
	private JPasswordField tfdPasswd;
	private HashMap<String, String> hashMapOfEncryptedFile = new HashMap<String, String>();
	private File encrypetdFile;
	private JEditorPane editorPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) { new CipherWindow();}

	/**
	 * Create the application.
	 */
	public CipherWindow() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frmOszimtcrypter = new JFrame();
		frmOszimtcrypter.setAlwaysOnTop(true);
		frmOszimtcrypter.setTitle("OSZimt-Crypter");
		frmOszimtcrypter.setBounds(100, 100, 450, 300);
		frmOszimtcrypter.setType(Type.UTILITY);
		frmOszimtcrypter.setVisible(true);
		frmOszimtcrypter.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		frmOszimtcrypter.getContentPane().setLayout(new BorderLayout(0, 0));
		frmOszimtcrypter.addWindowListener(new WindowAdapter() {
			   public void windowClosing(WindowEvent evt) {
				     onExit();
				   }
				  });
		
		
		JPanel pnl1 = new JPanel();
		frmOszimtcrypter.getContentPane().add(pnl1, BorderLayout.CENTER);
		pnl1.setLayout(new BorderLayout(0, 0));
		
		JPanel pnlbutton = new JPanel();
		pnl1.add(pnlbutton, BorderLayout.SOUTH);
		
		
		
		editorPane = new JEditorPane();
		pnl1.add(editorPane, BorderLayout.CENTER);
		
		JPanel pnlpaswd = new JPanel();
		pnl1.add(pnlpaswd, BorderLayout.NORTH);
		
		JLabel lblpasswd = new JLabel("Password");
		pnlpaswd.add(lblpasswd);
		
		tfdPasswd = new JPasswordField();
		tfdPasswd.setColumns(30);
		lblpasswd.setLabelFor(tfdPasswd);
		pnlpaswd.add(tfdPasswd);
		
		JButton btnNewButton = new JButton("Encrypt");
		btnNewButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				//String pw =  String.valueOf(tfdPasswd.getPassword());
				String temp = editorPane.getText();
				
				try {
		      FileWriter myWriter = new FileWriter("data.oszcryped");
		      myWriter.write(editorPane.getText());
		      myWriter.close();
		      System.out.println(hashMapOfEncryptedFile.toString());
		    } catch (IOException e) {
		      System.out.println("An error occurred.");
		      e.printStackTrace();
		    }
				
			}
		});
		pnlbutton.add(btnNewButton);
		
		JButton btnNewButton_1 = new JButton("Decrypt");
		pnlbutton.add(btnNewButton_1);
		editorPane.setText("Heare you can type");
			    try {
			    	encrypetdFile = new File("data.oszcryped");
			      Scanner myReader = new Scanner(encrypetdFile);
			      while (myReader.hasNextLine()) {
			        String data = myReader.nextLine();
			        editorPane.setText(data);
			        //hashMapOfEncryptedFile = HashMapFrom(data);
			      }
			      myReader.close();
			    } catch (FileNotFoundException e) {
			      System.out.println("An error occurred.");
			      e.printStackTrace();
			    }
	}
	public void onExit() {
		try {
		      FileWriter myWriter = new FileWriter("data.oszcryped");
		      //myWriter.write(hashMapOfEncryptedFile.toString());
		      myWriter.write(editorPane.getText());
		      myWriter.close();
		      //System.out.println(hashMapOfEncryptedFile.toString());
		      System.out.println();
		    } catch (IOException e) {
		      System.out.println("An error occurred.");
		      e.printStackTrace();
		    }
		  System.err.println("Exit");
		  System.exit(0);
		}
	public static HashMap HashMapFrom(String s){
	    HashMap base = new HashMap(); //result
	    int dismiss = 0; //dismiss tracker
	    StringBuilder tmpVal = new StringBuilder(); //each val holder
	    StringBuilder tmpKey = new StringBuilder(); //each key holder

	    Type object = Type.NORMAL;
		for (String next:s.split("")){ //each of vale
	        if(dismiss==0){ //if not writing value
	            if (next.equals("=")) //start writing value
	                dismiss=1; //update tracker
	            else
	                tmpKey.append(next); //writing key
	        } else {
	            if (next.equals("{")) //if it's value so need to dismiss
	                dismiss++;
	            else if (next.equals("}")) //value closed so need to focus
	                dismiss--;
	            else if (next.equals(",") //declaration ends
	                    && dismiss==1) {
	                //by the way you have to create something to correct the type
	                Object ObjVal = object.valueOf(tmpVal.toString()); //correct the type of object
	                base.put(tmpKey.toString(),ObjVal);//declaring
	                tmpKey = new StringBuilder();
	                tmpVal = new StringBuilder();
	                dismiss--;
	                continue; //next :)
	            }
	            tmpVal.append(next); //writing value
	        }
	    }
	    Object objVal = object.valueOf(tmpVal.toString()); //same as here
	    base.put(tmpKey.toString(), objVal); //leftovers
	    return base;
	}

}
