import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.AlgorithmParameters;
import java.security.SecureRandom;
import java.security.spec.KeySpec;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.WindowConstants;

public class CipherWindow {

    private JFrame frmOszimtcrypter;
    private JPasswordField tfdPasswd;
    private File encryptedFile;
    private JEditorPane editorPane;

    private static final String ALGORITHM = "AES";
    private static final String SECRET_KEY_SPEC = "AES";
    private static final int ITERATION_COUNT = 65536;
    private static final int KEY_LENGTH = 256;

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    CipherWindow window = new CipherWindow();
                    window.frmOszimtcrypter.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the application.
     */
    public CipherWindow() {
        initialize();
    }

    /**
     * Initialize the contents of the frame.
     */
    private void initialize() {
        frmOszimtcrypter = new JFrame();
        frmOszimtcrypter.setAlwaysOnTop(true);
        frmOszimtcrypter.setTitle("OSZimt-Crypter");
        frmOszimtcrypter.setBounds(100, 100, 450, 300);
        frmOszimtcrypter.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        frmOszimtcrypter.getContentPane().setLayout(new BorderLayout(0, 0));
        frmOszimtcrypter.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                onExit();
            }
        });

        JPanel pnl1 = new JPanel();
        frmOszimtcrypter.getContentPane().add(pnl1, BorderLayout.CENTER);
        pnl1.setLayout(new BorderLayout(0, 0));

        JPanel pnlbutton = new JPanel();
        pnl1.add(pnlbutton, BorderLayout.SOUTH);

        editorPane = new JEditorPane();
        pnl1.add(editorPane, BorderLayout.CENTER);

        JPanel pnlpaswd = new JPanel();
        pnl1.add(pnlpaswd, BorderLayout.NORTH);

        JLabel lblpasswd = new JLabel("Password");
        pnlpaswd.add(lblpasswd);

        tfdPasswd = new JPasswordField();
        tfdPasswd.setColumns(30);
        lblpasswd.setLabelFor(tfdPasswd);
        pnlpaswd.add(tfdPasswd);

        JButton btnNewButton = new JButton("Encrypt");
        btnNewButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String password = String.valueOf(tfdPasswd.getPassword());
                String plaintext = editorPane.getText();

                try {
                    byte[] salt = generateSalt();
                    SecretKey secretKey = generateSecretKey(password, salt);

                    byte[] iv = generateInitializationVector();
                    AlgorithmParameters parameters = generateAlgorithmParameters(iv);

                    byte[] encryptedBytes = encrypt(plaintext.getBytes(StandardCharsets.UTF_8), secretKey, parameters);
                    String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);

                    FileOutputStream fileOutputStream = new FileOutputStream("data.oszcryped");
                    fileOutputStream.write(salt);
                    fileOutputStream.write(iv);
                    fileOutputStream.write(encryptedBytes);
                    fileOutputStream.close();
                } catch (IOException ex) {
                    System.out.println("An error occurred while encrypting the data.");
                    ex.printStackTrace();
                }
            }
        });
        pnlbutton.add(btnNewButton);

        JButton btnNewButton_1 = new JButton("Decrypt");
        btnNewButton_1.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String password = String.valueOf(tfdPasswd.getPassword());

                try {
                    FileInputStream fileInputStream = new FileInputStream("data.oszcryped");
                    byte[] salt = new byte[8];
                    fileInputStream.read(salt);

                    byte[] iv = new byte[16];
                    fileInputStream.read(iv);

                    int encryptedLength = fileInputStream.available();
                    byte[] encryptedBytes = new byte[encryptedLength];
                    fileInputStream.read(encryptedBytes);

                    SecretKey secretKey = generateSecretKey(password, salt);
                    AlgorithmParameters parameters = generateAlgorithmParameters(iv);

                    byte[] decryptedBytes = decrypt(encryptedBytes, secretKey, parameters);
                    String decryptedText = new String(decryptedBytes, StandardCharsets.UTF_8);

                    editorPane.setText(decryptedText);

                    fileInputStream.close();
                } catch (IOException ex) {
                    System.out.println("An error occurred while decrypting the data.");
                    ex.printStackTrace();
                }
            }
        });
        pnlbutton.add(btnNewButton_1);

        editorPane.setText("Here you can type");
        try {
            encryptedFile = new File("data.oszcryped");
            FileInputStream fileInputStream = new FileInputStream(encryptedFile);

            byte[] salt = new byte[8];
            fileInputStream.read(salt);

            byte[] iv = new byte[16];
            fileInputStream.read(iv);

            int encryptedLength = fileInputStream.available();
            byte[] encryptedBytes = new byte[encryptedLength];
            fileInputStream.read(encryptedBytes);

            SecretKey secretKey = generateSecretKey(String.valueOf(tfdPasswd.getPassword()), salt);
            AlgorithmParameters parameters = generateAlgorithmParameters(iv);

            byte[] decryptedBytes = decrypt(encryptedBytes, secretKey, parameters);
            String decryptedText = new String(decryptedBytes, StandardCharsets.UTF_8);

            editorPane.setText(decryptedText);

            fileInputStream.close();
        } catch (IOException e) {
            System.out.println("An error occurred while reading the encrypted file.");
            e.printStackTrace();
        }
    }

    private byte[] generateSalt() {
        SecureRandom secureRandom = new SecureRandom();
        byte[] salt = new byte[8];
        secureRandom.nextBytes(salt);
        return salt;
    }

    private SecretKey generateSecretKey(String password, byte[] salt) {
        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATION_COUNT, KEY_LENGTH);
            SecretKey secretKey = factory.generateSecret(spec);
            return new SecretKeySpec(secretKey.getEncoded(), SECRET_KEY_SPEC);
        } catch (Exception e) {
            System.out.println("An error occurred while generating the secret key.");
            e.printStackTrace();
        }
        return null;
    }

    private byte[] generateInitializationVector() {
        SecureRandom secureRandom = new SecureRandom();
        byte[] iv = new byte[16];
        secureRandom.nextBytes(iv);
        return iv;
    }

    private AlgorithmParameters generateAlgorithmParameters(byte[] iv) {
        try {
            AlgorithmParameters parameters = AlgorithmParameters.getInstance(ALGORITHM);
            parameters.init(new IvParameterSpec(iv));
            return parameters;
        } catch (Exception e) {
            System.out.println("An error occurred while generating the algorithm parameters.");
            e.printStackTrace();
        }
        return null;
    }

    private byte[] encrypt(byte[] plaintext, SecretKey secretKey, AlgorithmParameters parameters) {
        try {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, parameters);
            return cipher.doFinal(plaintext);
        } catch (Exception e) {
            System.out.println("An error occurred while encrypting the data.");
            e.printStackTrace();
        }
        return null;
    }

    private byte[] decrypt(byte[] ciphertext, SecretKey secretKey, AlgorithmParameters parameters) {
        try {
            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, secretKey, parameters);
            return cipher.doFinal(ciphertext);
        } catch (Exception e) {
            System.out.println("An error occurred while decrypting the data.");
            e.printStackTrace();
        }
        return null;
    }

    public void onExit() {
        String password = String.valueOf(tfdPasswd.getPassword());
        String plaintext = editorPane.getText();

        try {
            byte[] salt = generateSalt();
            SecretKey secretKey = generateSecretKey(password, salt);

            byte[] iv = generateInitializationVector();
            AlgorithmParameters parameters = generateAlgorithmParameters(iv);

            byte[] encryptedBytes = encrypt(plaintext.getBytes(StandardCharsets.UTF_8), secretKey, parameters);
            String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);

            FileOutputStream fileOutputStream = new FileOutputStream("data.oszcryped");
            fileOutputStream.write(salt);
            fileOutputStream.write(iv);
            fileOutputStream.write(encryptedBytes);
            fileOutputStream.close();
        } catch (IOException ex) {
            System.out.println("An error occurred while encrypting the data.");
            ex.printStackTrace();
        }

        System.err.println("Exit");
        System.exit(0);
    }
}
