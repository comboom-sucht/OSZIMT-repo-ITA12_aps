import java.awt.Window.Type;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

public class UserManagement {
	
	private HashMap<String, String> users = new HashMap<String, String>();
	private File  filename = new File("um.oszuser");
	private String password = "v$Eez6!BX&cA3ZJ%Ztw87%MwbpbsAkjz2PaECW&grSq@DGBHisgjJwC@Kq@R4Ufz";
	private SecureEnclave se = new SecureEnclave();
	private FileHandler fh = new FileHandler();
	
	public UserManagement() {
		loadUsers();
	}
	
	public void addUser(String username, String password) {
		users.put(username, password);
		saveUsers();
	}
	
	public void removeUser(String username) {
		users.remove(username);
		if (users != null) {
			saveUsers();
		} else {
			fh.deleteFile(filename);
		}
	}
	
	public boolean userExists(String username, String password) {
	    String storedPassword = users.get(username);
	    return storedPassword != null && storedPassword.equals(password);
	}

	
	private void loadUsers() {
		try {
			byte[] encryptedData = fh.readFile(filename);
			String decryptedText = se.decrypt(password, encryptedData);
			// Deserialize the decrypted text into a HashMap
			users = HashMapFrom(decryptedText);
		} catch (IOException e) {
			// Handle file read error
			e.printStackTrace();
		} catch (SecurityException e) {
			// Handle decryption error
			e.printStackTrace();
		}
	}
	
	private void saveUsers() {
		// Serialize the users HashMap into a string
		// Encrypt the serialized users data
		
		System.out.print(users.toString());
		byte[] encryptedData = se.encrypt(password, users.toString());
		try {
			fh.writeFile(filename, encryptedData);
		} catch (IOException e) {
			// Handle file write error
			e.printStackTrace();
		}
	}
	
	
    private HashMap<String, String> HashMapFrom(String mapString) {
        HashMap<String, String> newMap = new HashMap<>();
        String[] keyValuePairs = mapString.replaceAll("\\{|\\}", "").split(", ");
        for (String pair : keyValuePairs) {
            String[] entry = pair.split("=");
            newMap.put(entry[0].trim(), entry[1].trim());
        }
        return newMap;
    } 
	

}

